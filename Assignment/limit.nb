(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    416416,       8263]
NotebookOptionsPosition[    414397,       8209]
NotebookOutlinePosition[    414741,       8224]
CellTagsIndexPosition[    414698,       8221]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["differentiate (\[ExponentialE]^(8t)-\[ExponentialE]^(4t))/(4t)", \
"WolframAlphaLong",
 CellChangeTimes->{{3.7003525288667326`*^9, 3.700352568305148*^9}, {
  3.7003526818111534`*^9, 3.700352723032151*^9}, {3.7003527774321594`*^9, 
  3.7003527897806897`*^9}, {3.700352854839241*^9, 
  3.7003528609872417`*^9}},ExpressionUUID->"dc484b9f-c5c8-4754-9082-\
070b82380edc"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "differentiate (\[ExponentialE]^(8t)-\[ExponentialE]^(4t))/(4t)", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[(-E^(4 t) + E^(8 t))/(4 t), t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "t"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "t"}]]], "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"8", " ", "t"}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]]}], 
                    RowBox[{"4", " ", "t"}]], HoldForm], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"4", " ", "t"}]], " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"4"}], " ", "t"}]}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"8", " ", "t"}], "-", "1"}], ")"}]}], "+", "1"}], 
                    ")"}]}], 
                RowBox[{"4", " ", 
                  SuperscriptBox["t", "2"]}]], Identity]}], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Input__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2), {t, -0.75, \
0.75}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max110$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min109$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min109$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max110$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$421582$$ = 
                 False, 
                 CalculateUtilities`GraphicsUtilities`Private`min109$421583$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`max110$\
421584$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max110$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min109$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$421582$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min109$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min109$\
421583$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max110$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max110$\
421584$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$421313[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][((Rational[1, 4] 
                    E^(4 $CellContext`t)) $CellContext`t^(-2)) (1 - 
                    4 $CellContext`t + 
                    E^(4 $CellContext`t) (-1 + 
                    8 $CellContext`t)), {$CellContext`t, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min109$$], 
                    (
                    Piecewise[{{
                    0. + 0.8017837257372731 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    0.8017837257372731 Tan[1.5040801783846716` #]]& )[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min109$$], \
-0.75], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min109$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max110$$]], 
                    (
                    Piecewise[{{
                    0. + 0.8017837257372731 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    0.8017837257372731 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min109$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max110$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min109$$ + 
                    0.0015, 
                    CalculateUtilities`GraphicsUtilities`Private`max110$$]], 
                    0.75]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min109$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max110$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$421313] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$421313[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$421313[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMtK4fkRDbYEwaUJLyvV58SS1cO9jONvjz4LObpFm7SjEdoCn9cKovzeO755673osTGaX9Xq+\
nb1rzQXKa3sHTc2v25TyXhaDvznMFWjMp0hv47L41MZgD4OQHUO+7bc17qebE+PNrfJ/\
wpODEwFfDODMM9PRQkXzGEl17xoqd2p9MuUwIZz/\
h5Wi4szsceRQMZUyMASX0blvEfKaIhrSHQLes2eNEfPPHZ+\
XxU8F5DN8LEAnoJ9Y7UYRaGCkIx3SCb73WRD3EvAwRlCh65Sw5ce61vUAbxUQ2gXmOb1zK1U5bXKIy\
7al5VFKzST8++rv4QMYuJO9xObuz4y8sjOvF3kVR/XPqBnh+\
0xZeybO1vGF6bznSRgw7Bb3K5qvWVfKEVC3rgl9QdUWzZasxXj5h6n+kY6bNahjDtmHA/\
MRWeL3yVuFHbeFlji2/\
kPZjaz57Rwm4bjJUcvsoacEXUTRTHniBtk9X59bhMR5UfMfoDKlghRPZOMtucd3xtAKvd4QYazfdgn\
REPQEiyMG6qOP2gGXM7M+\
IIokFXlzXL3tsIutQAu5sX3smKLPjyxOyaW1Cc5Qu1Z2YZPblj4pbyeVCkyHvR8JABmqj6O9hfZQlV\
9CJDIwkxguaeg3msEpqTFSw7AclSJwTwRCS/bIf980/\
XK4EUnWoUF3KszhwpTkPT6JfFvgYRGZmze06cHQFty1mE8mzWnURS9PlabM9pvtNphs3NAd6KAmhJQ\
kf6N2e0O0Jf3FPWNmBuyWhWxK6JaFbErol4f9dElzE+K/0G/ortpY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2), {t, -4.5, \
4.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max112$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min111$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min111$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max112$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$421912$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min111$\
421913$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max112$421914$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max112$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min111$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$421912$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min111$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min111$\
421913$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max112$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max112$\
421914$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$421643[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][((Rational[1, 4] 
                    E^(4 $CellContext`t)) $CellContext`t^(-2)) (1 - 
                    4 $CellContext`t + 
                    E^(4 $CellContext`t) (-1 + 
                    8 $CellContext`t)), {$CellContext`t, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min111$$], 
                    (
                    Piecewise[{{
                    0. + 4.810702354423638 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    4.810702354423638 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min111$$], \
-4.5], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min111$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max112$$]], 
                    (
                    Piecewise[{{
                    0. + 4.810702354423638 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 4.810702354423638 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min111$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max112$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min111$$ + 
                    0.009000000000000001, 
                    CalculateUtilities`GraphicsUtilities`Private`max112$$]], 
                    4.5]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> 31, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min111$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max112$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$421643] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$421643[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[CalculateUtilities`GraphicsUtilities`Private`lines, 
                    Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$421643[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[
                    CalculateUtilities`GraphicsUtilities`Private`intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMtFH4hITYBmPSgJKU7/\
XiS2rh2pntbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z07klHa7/V6+\
ro1HyWn6S08PbVmV85yWQj6/ixXoDWTIr2Gz+5aE4PZA05+APW+m9Z8kGpGjD+/\
wfcJTwpODHwzjDPDQE/2FcmnLNG1Z6TYif3JhMuEcPYTng+3t16/\
GnoUDGVEjAEl9Mu2iPlUEQ1pD4FuWLPDifjuj0/K4+eC8xiOCxAJ6EfWO1aEWhgpCMd0gm+\
90kTdx7wMEZQoeuksOXHutL1AG8VENoZZjm9cyNVWW1yiMu2peVBSs04/Pvrb+EDGLiTvcTm7s+\
MvLIyrxd55Uf1z6gZ4ftsWXsnTlbxheu840kYMOwG9zOaL1lXyhFQt64KfU3VJs2WjMV48Yep/\
pEOmzXIY223DgNmRrfBq5S3DD9vCyxxbfi7th9Z88Y4ScNVkqOT2SdKCz6NopjzwAm2frs6tw2Pcq/\
iO0RlSwQonsnGW3eK643EFXu8IMdZusgHpiHoCRJCDdVHH7R7LmNmdEkUSCzy/rl/\
22FjWoQTc2b72TFBmx5cnZN3ahOYgXag7Mcn06x8Vt5LLuSZD3g+\
EgQzUWtHfwfooS66gYxkYSYwXNPUazGGV1IioYNkPSpA4J4IhJPtlP+\
6bf7hYCaRqX6G6lGdx4EpzFp5EvyzwIYjMTJvbdeDoCm5bzCaSp7XqIpami9Nmc0z3m0w3bmgO9FAS\
QksSPtC7PaHbE/7inrC0A3dLQrckdEtCtyR0S8L/uyS4iPFf6TfUirbG"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Factor[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"4", " ", "t"}]], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]], " ", "t"}], "-", 
                    RowBox[{"4", " ", "t"}], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]], "+", "1"}], ")"}]}], 
              RowBox[{"4", " ", 
                SuperscriptBox["t", "2"]}]], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"4", " ", "t"}]], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"4", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]]}], "-", 
                    RowBox[{"1"}]}], ")"}], " ", "t"}], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]], "+", "1"}], ")"}]}], 
              RowBox[{"4", " ", 
                SuperscriptBox["t", "2"]}]], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox["\[ExponentialE]", 
                RowBox[{"4", " ", "t"}]], " ", 
               RowBox[{"(", 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    FractionBox["1", "4"], "-", 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]], "4"]}], 
                    SuperscriptBox["t", "2"]], "+", 
                   FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]]}], "-", 
                    RowBox[{"1"}]}], "t"]}], ")"}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Expanded form", "scanner" -> "Simplification", "id" -> 
     "ExpandedForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Expand[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox[
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"4", " ", "t"}]], 
                RowBox[{"4", " ", 
                  SuperscriptBox["t", "2"]}]], "-", 
               FractionBox[
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"8", " ", "t"}]], 
                RowBox[{"4", " ", 
                  SuperscriptBox["t", "2"]}]], "-", 
               RowBox[{
                 FractionBox[
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"4", " ", "t"}]], "t"]}], "+", 
               FractionBox[
                RowBox[{"2", " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"8", " ", "t"}]]}], "t"]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Numerical roots", "scanner" -> "Reduce", "id" -> 
     "NumericalRoot", "position" -> "450", "error" -> "false", "numsubpods" -> 
     "10"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-24.9783 - 0.648617 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"49.80398384453511`"}]}], "-", 
                RowBox[{"0.651907232473762`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-24.9783 + 0.648617 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"49.80398384453511`"}]}], "+", 
                RowBox[{"0.651907232473762`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-24.5757 - 1.20293 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"49.39949774980505`"}]}], "-", 
                RowBox[{"1.20917794359858`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-24.5757 + 1.20293 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"49.39949774980505`"}]}], "+", 
                RowBox[{"1.20917794359858`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-23.8802 - 1.59117 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"48.70047978455871`"}]}], "-", 
                RowBox[{"1.5997908436163084`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-23.8802 + 1.59117 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"48.70047978455871`"}]}], "+", 
                RowBox[{"1.5997908436163084`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-22.9721 - 1.49294 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"47.787266196546526`"}]}], "-", 
                RowBox[{"1.501518038020175`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-22.9721 + 1.49294 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"47.787266196546526`"}]}], "+", 
                RowBox[{"1.501518038020175`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-22.2765 - 0.885189 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"47.08730076709652`"}]}], "-", 
                RowBox[{"0.8905194745758185`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FindRoot[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2) == 0, {t, \
-22.2765 + 0.885189 I}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"t", "\" \[TildeTilde] \"", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{"47.08730076709652`"}]}], "+", 
                RowBox[{"0.8905194745758185`", " ", "\[ImaginaryI]"}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "NumericalRoot__More digits"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"t", "\[Element]", 
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]]}], "\" : \"", 
              RowBox[{"t", "\[NotEqual]", "0"}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]]}], "\" : \"", 
              TemplateBox[{
                StyleBox["\" or \"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False], 
                RowBox[{"0", "<", "y", "<", "6"}], 
                RowBox[{"y", ">", "6"}]}, "RowWithSeparator"], "\"}\""}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "\[DoubleStruckCapitalR] is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Series expansion at t=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAt `1`x=0.", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(E^(4 t) (1 - 4 t + E^(4 t) (-1 + 8 t)))/(4 t^2), {t, 0, \
4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"6", "+", 
                    FractionBox[
                    RowBox[{"112", " ", "t"}], "3"], "+", 
                    RowBox[{"120", " ", 
                    SuperscriptBox["t", "2"]}], "+", 
                    FractionBox[
                    RowBox[{"3968", " ", 
                    SuperscriptBox["t", "3"]}], "15"], "+", 
                    RowBox[{"448", " ", 
                    SuperscriptBox["t", "4"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["t", "5"], ")"}], 
                    SeriesData[$CellContext`t, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"t", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", 
                    FractionBox["112", "3"], ",", "120", ",", 
                    FractionBox["3968", "15"], ",", "448"}], "}"}], ",", "0", 
                    ",", "5", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[D[(E^(8 t) - E^(4 t))/(4 t), t], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"4", " ", "t"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"8", " ", "t"}]}], ")"}]}]}], ")"}]}], 
                    RowBox[{"4", " ", 
                    SuperscriptBox["t", "2"]}]], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]], "-", 
                    RowBox[{"1"}]}], ")"}]}], 
                    RowBox[{"4", " ", "t"}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
   Typeset`pod37$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {
    False, False, False, False, False, False, False, False, False, False}, 
    True}, Typeset`aux6$$ = {True, False, {False, False}, True}, 
   Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
     "D", "timedout" -> 
     "FunctionProperties,Reduce,BranchPoint,ComplexMap,RiemannSurface,ODE,\
Sequence,DomainAndRange,GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "4.865", "parsetiming" -> "0.745", "parsetimedout" -> "false", 
     "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa10511fg83hi4e580i58700003ia5b72cb8fb6b4b&s=4", "id" -> 
     "MSPa10521fg83hi4e580i587000044badige8h56bcf3", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "4", "related" -> 
     "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa10531fg83hi4e580i58700004cea0b6c9cgi9h77&s=4", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "1", "datatypes" -> 
     "D", "timedout" -> 
     "FunctionProperties,GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "5.563", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "4", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 4, 5, 13, 47, 50.517241`9.456014476313737}, "Line" -> 3, 
    "SessionID" -> 18252417980437539623}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7, 8}, Typeset`failedpods$$ = {9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
   37}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "differentiate (\[ExponentialE]^(8t)-\[ExponentialE]^(4t))/(4t)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{790., {162., 169.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa10511fg83hi4e580i58700003ia5b72cb8fb6b4b&s=4", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.700352870606241*^9},ExpressionUUID->"ffe243c4-5d8b-44a7-a33e-\
48fb1a2bc7c2"]
}, Open  ]],

Cell[BoxData["          "], "Input",
 CellChangeTimes->{{3.7003529522372417`*^9, 
  3.700352953062297*^9}},ExpressionUUID->"2d30a825-1054-4055-8724-\
cb2720ebf3fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"4", " ", "t"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"4", " ", "t"}]}], "+", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"4", " ", "t"}]], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"8", " ", "t"}], "-", "1"}], ")"}]}], "+", "1"}], ")"}]}], 
    RowBox[{"4", " ", 
     SuperscriptBox["t", "2"]}]], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", ".2"}], ",", ".2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7003530934953227`*^9, 
  3.700353158540339*^9}},ExpressionUUID->"61b1aa06-242f-46e2-b890-\
302ae1aca651"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[{
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1:eJwBEQLu/SFib1JlAgAAACAAAAACAAAAJcwRiJmZyb8GvbvG2GL8P1qU6WyU
lcm/8U5Fyylo/D+OXMFRj5HJvwh2Idh7bfw/9uxwG4WJyb84vqULI3j8P8YN
0K5wecm/XTau332N/D9mT47VR1nJv6nWYmpluPw/qNIKI/YYyb+Fib+B/Q79
PyzZA75SmMi/bM4OmF2//T933W/uZ4HHv2xX3iDXTP8/SzMm3fh8xr+6f52/
s2kAQJG8Np6lfcW/4c86w74yAUAaPcFZrmjEv7sBShgjGAJALg+W0zJmw78B
YeCrZvkCQITY5EcTTsK/dSuhsWH6A0BM1Y2ODzvBvxd1CSlmBAVAniOBk4c6
wL/gNjZUdwkGQGXS3CW3SL6/58AoOG4zB0CiAEyhVkG8v+CkqZhQWAhAw5Vv
wS1Eur8EGc5C+YUJQGkZh9a8G7i/qZBRa23eCkAjQDNoQxi2v4HZP0nLMAxA
YlXT7oHps79t1ZVAF7MNQIbRJxr4xLG/Y1aASitDD0B74SGEy4qvv4hys4P2
ZRBA9PzbvRY1q7/M+zkMQ0YRQJVev/BQKae/SMofzM4iEkBBnYoN+8aiv+UC
oI+qHhNAa1N95yjynL/MGtresyMUQKT4N6Y56pS/tH8j+jQkFUDir4RxVGqI
v+VbutVCSRZAOA599uJPcL8fwjWdr2kXQMidJezmtyC/D4cXNSD7F0Brzf3x

         "]], LineBox[CompressedData["
1:eJwB8QIO/SFib1JlAgAAAC4AAAACAAAAyJ0l7Oa3ID+iSS3R4AQYQALoZ36a
E4k/Lrl82AbnGUBuJmNhYpuUPw+nHA5gNRtAx57CrxdanT/ymivhd7McQMg9
qDX396I/VL6aJqs/HkAE5kWa8/imPz/8Zv8ZxR9ANrH7FIBQqz+FBlWnK8Eg
QEA2iJYdXq8/mO/EclacIUDA9lXnpauxP6Y43g9rfiJA2+NzDoXTsz98PG1p
AoEjQOIt/bhs1rU/maEoumt/JEBkiZJunAS4P74LWRtdoiVA0kGTp9QNuj8h
acVgD8EmQFyT3zvVDLw/NcIwZgHpJ0Bh9jfbHTe+P+COxh6XOylAKdv9fjce
wD+gfRjDAokqQN/D5RWENsE/WM+/iGcGLEAjeXPatEnCP5OLh6pUki1A3dy2
4GlKwz9AvgJw9BcvQFVJgOzCYMQ/QLzCk+lqMEBDZP85oGTFP+xN3kWmRjFA
vksktWFjxj+d8VqHjikyQPY7zzXHd8c/3vO65FMtM0Ck2i/4sHnIP6n8FHgy
LTRAamJvmjB+yD9yAPihxzE0QDDqrjywgsg/aGbr3V02NEC8+S2Br4vIP2+n
CY2NPzRA1BgsCq6dyD8epFPP+VE0QARXKByrwcg/y2zPHQZ3NEBk0yBApQnJ
P+2mRbPvwTRAKltg4iQOyT9OU3Ofp8Y0QPDin4SkEsk/M6ECpmDLNEB88h7J
oxvJPwePVAPW1DRAlBEdUqItyT8CTi4Gzuc0QMRPGWSfUck/t440aPMNNUCK
11gGH1bJP3BtTxq9EjVAUF+YqJ5ayT94Jg3rhxc1QNxuF+2dY8k/z7yD6SAh
NUD0jRV2nHXJP5k742FgNDVAuhVVGBx6yT+fOJoQMzk1QICdlLqbfsk/S+8a
4AY+NUAMrRP/mofJPx05juKxRzVA0jRToRqMyT9HTgsWiUw1QJi8kkOakMk/
ICFna2FRNUBeRNLlGZXJP/gc5+I6VjVAJcwRiJmZyT8XvtB8FVs1QJS3TAA=

         "]]}},
      Annotation[#, 
       "Charting`Private`Tag$10511#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.2, 0.2}, {0., 21.355796624147924`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.700353139449354*^9, 
  3.7003531603803253`*^9}},ExpressionUUID->"509a3d7d-3428-43bc-97d8-\
e21995587f51"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"8", "t"}]], "-", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"4", "t"}]]}], 
    RowBox[{"4", "t"}]], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.700353223315326*^9, 3.700353275403328*^9}, {
   3.700370518123124*^9, 3.700370523181148*^9}, {3.7003706509525003`*^9, 
   3.7003706849084487`*^9}, {3.700377887546687*^9, 3.7003778917672825`*^9}, {
   3.7003779237969475`*^9, 3.7003779242949667`*^9}, 3.7003779593623495`*^9, {
   3.7003780366754894`*^9, 
   3.7003782229824953`*^9}},ExpressionUUID->"8613382e-2a8b-46ac-8360-\
617bd2411e4a"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[{
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1:eJwBEQLu/SFib1JlAgAAACAAAAACAAAAJcwRiJmZub8UIFbA5a3hP1qU6WyU
lbm/MicNzIav4T+OXMFRj5G5v3hDrP8nseE/9uxwG4WJub/2i7LearThP8YN
0K5webm/uiZOfPK64T9mT47VR1m5v9YmOTkJyOE/qNIKI/YYub/ut7DVVOLh
PyzZA75SmLi/3rMPeWUX4j933W/uZ4G3v9wxm5+ojOI/SzMm3fh8tr/ZmCYy
7/ziP5G8Np6lfbW/JpKQbq9t4z8aPcFZrmi0v9r/EF0R6+M/Lg+W0zJms79d
x1NZC2PkP4TY5EcTTrK/WaL3NWHo5D9M1Y2ODzuxv73uduu5buU/niOBk4c6
sL9N52g1M+/lP2XS3CW3SK6/P+pWzQt+5j+iAEyhVkGsv99mDlTOBuc/w5Vv
wS1Eqr+l3hV1JpDnP2kZh9a8G6i/KMgHlO4o6D8jQDNoQximv3JFLPkcu+g/
YlXT7oHpo79za6fTn13pP4bRJxr4xKG/RAqbq2AB6j974SGEy4qfvyQhVTr1
neo/9PzbvRY1m7+hkmyuHEzrP5Vev/BQKZe//wqFz9Ty6z9BnYoN+8aSvwNi
RzImrOw/a1N95yjyjL9DLXXY8GbtP6T4N6Y56oS/QUKTdqUZ7j/ir4RxVGp4
v3NX8V5h4O4/OA599uJPYL+KU1M8u57vP8idJezmtxC/Hx11rd387z+aoRNA

         "]], LineBox[CompressedData["
1:eJwVyX0slAEAx/EjvWinSBfykhZ6PSlvk+zHxEJFikKruDOr6aQXIt3UhJR3
heNO3pYorkvcYy6KRGu1nUpeSjuFNcnLvbrnSfXHd58/vhuj4oKjdWk0mv2/
/tvLt50abzUEfFYE5+vMQHcyhsszToJhg0Z7onQGHDtWZFRZGlpDfDt2Lc7g
teBlk0l4NiY7I4xiz8+i16POWaUqwNGuqcIc2Sz0xn148+p7WMfQz5UEzsHl
iXZtalAZ4hxa9jv2zcHTJfOe5ckK1JwLa0/3mEenMmSitqESoirGNFs0j+Gx
i6tu9ldjtztdmuAkh4xJiWM/1SKWK/NUCOVg3yrglOvV4SeLT+O4KyD1Knzw
waAeq7udI6w6FThROOr+kf4ITUKHjEQfJSKVrsOWro3QS9/hOzyoxNZhiutq
JUT65hqZIkaF0a4fjDSXJzhirfRfXKrGpqSLQ81+Ihw6qjoTUavGl5GWb2f8
n6K/TPL2q4cGIX6pUy9PN0P5Imswd0IDb/ai2332M0T+uTRml7WA5wE2zyJZ
Lei5lGybw9RC6f7e+XViK5IDe75fGNOiZminWpgkxjVHk8+CfBJno+J4Dlwx
hBMfr4iKSDj8bNwrvCGGmhYd31NMol3DvN50Wwxel8XZ33wSH0x3rGzki3Eh
3uCqTz0JvWNbLBpeiOFX/m6TbhcJdr+1Z60+AXbM5IBETmJbxGmZzSoC15zC
0kdUJGZkFWk1awjIm0eztQskUuas+qrNCUS9Ca3bo0OhyMgyuIpJ4DCLTpcY
UOgONGNXHCZQvKWgWGpHIWvg+LINoQQ0S+xHlFspBJ0qqROEExCuSEs2Z1IY
4Zj84rMIGH/K6I52pCDPZiSUXyagI1md+wcU2hghphbJBETrBFW23hRS+UVt
ZVwCHD83w4O+FOiPjRd5GQRoDzs05QcoSJ2OVK6/8+/ndVx+FUihpL3Am5dH
QL9HETAdTOHkPukPs7sEttfHppiEUrB9a5RZWkogWmC/3CuMwl+bXnWh
         "]]}},
      Annotation[#, 
       "Charting`Private`Tag$22287#1"]& ], {}}, {{}, {}, {}}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.5524777180262412},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.1, 0.1}, {0.5524777180262412, 1.8342905312109903`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.700353281217353*^9, {3.7003704973861237`*^9, 3.7003705265571227`*^9}, {
   3.7003706792474427`*^9, 3.7003706880164433`*^9}, 3.70037789411328*^9, 
   3.7003779963954477`*^9, {3.7003780327704506`*^9, 3.7003781399045315`*^9}, {
   3.7003781850065217`*^9, 
   3.7003782235564938`*^9}},ExpressionUUID->"5bdfa913-9369-453a-87d9-\
91e0fb0d005c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"limit", " ", "of", " ", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"8", "t"}]], "-", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"4", "t"}]]}], 
     RowBox[{"4", "t"}]]}], TraditionalForm]], "WolframAlphaShort",
  CellChangeTimes->{3.700352870606241*^9},ExpressionUUID->
  "04880136-727c-4291-bbc9-2cb70e694f3b"],
 "as t approaches 0"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.7003539552149725`*^9, 3.700353989161972*^9}, {
  3.7003540919443574`*^9, 3.700354124112359*^9}, {3.7003782434114943`*^9, 
  3.7003782434114943`*^9}},ExpressionUUID->"68634137-bfb2-423e-848c-\
56e992ff7691"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "limit of (E^(8 t) - E^(4 t))/(4 t)as t approaches 0", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "Limit", "id" -> "Limit", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Limit[(E^(8 t) - E^(4 t))/(4 t), t -> 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 UnderscriptBox["lim", 
                  RowBox[{"t", "\[Rule]", "0"}]], "\[ThinSpace]", 
                 StyleBox[
                  FractionBox[
                   RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"8", " ", "t"}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "t"}]]}], 
                   RowBox[{"4", " ", "t"}]], ScriptLevel -> 0, StripOnInput -> 
                  False]}], "\[LongEqual]", "1"}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Limit__Step-by-step solution"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Limit", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(E^(8 t) - E^(4 t))/(4 t), {t, -0.5625, 0.5625}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               StyleBox[
                GraphicsBox[{{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJw9jnkw3GcYxyXSJiFBHBU6jq0rXeuYUmeSNyLqNjmHUSVN4kjqSIMVRSrR
bBzDxEhRVk1HF1USFrXS7vsKdi3i2gRLdNm4hd3FupbdX7d/+P3xzDOfed/n
+/kSbsRdDj+opKTko5j/d3ZG7TqGCVBvxuHtvgQaCDj9LIQkEyBe4xE5/wEN
aG2ksIKkAvR6LmJJkkkD1AjfogaJAKl4mKbblNHAC+8ll5uLAlQYcWl2kkUD
b9VPPWJzBSjQy5Fjc7ISGFErNHJpAhQ8qtJZ1lYJmppKrPR9BcjL6LM6D0I1
YFRVaskoU0jqdlPVNPpPYMKQbTLLJ1HCgDDN9MNzYL2TOlfvxEdqHmf2Po5o
ACKmo/WXjRPIRS9n+VJPIwj+KCe5xfMd0iC3hfVc/QukDOoZ9DLH0JUFzw85
91uBJD5p6rgrD92hbrLDlZhAtySmKoA7glw8CyyfXm8DYvdytrHvMIpK3tUx
aGwH8XdvL4r/fYMIT0jqcVYsEJB4kCRO4qJm0+7Ie+IuMCkbYaevD6JQecmN
9ZBeYK+Z2WOoOYDKM2L/KDw0AHRsx1pClV6jpsEk65iuIVAl75rZ2+OgW33m
toFBb0Eud/5kkRUbpRR+5yfVGQWTdQ9kVwgdyMydoX30x3HwOO+rxWPebeis
QW6wngUfkFZUVIciX6LdX0/8bvK1ANQbdrZfCG5CcyI2+fnqNGA0wxPf3q5D
SueiTO4x5gDTdyisg/gbwjRYG1a2S8BzopwYKKagX0r1HeyWV4BGtpaE9YyC
yNLxUw6SFcBzfMK0d6agTrnNNde9FRBVEHtR89Fj1KRi/o3fMSHI9DlD7tP6
CQ152ZzOIgkBhzH+yt3xIUoIgezYGCF4SrSkX98jI9KwdvGKWAiMKZoeZz3I
6OiFNzKnHSGoF+yMfpqXiFJ1JQ2UAyIwWMyRjRgloOEi5SOfa4qAxuEIb3/3
75FyzXpalp0IELrcXsVrR6K89mzzl2QR8M6nfqKutQ35LgXGk3IROGR0fryd
vgVtCHsV0wqGtfNl5Mtb0K0m3GJBwfacL8z4+ZvQieVivapgY4xjV6exAYnY
sqsyJgJb0RsXfdXW4PHZu4EWCqZLS7SxulUoDJsZt1RwdOY5Ht1/FUb9EBRq
q+D3FTlh+rliWN16PtxZwdRm9wmurhCWrhnG+2L7/RagWtZWXhy232cedqcn
aiZg+33mIPOO5Of72H6fWYgVrlMf4n3eww0HaU0B7hdA+tU062LcPwX7GQfo
VNzPh45hqq003M+DyZUWXS24bwRi6IXPP7hvGLJVnfvbcB8Xsjv8h7vx/EGY
UcoL6sfz+6Ej9dYEF8/nQOJY2vQ7PI8Fc+NUI6fwvHYYqVeyNIPfQyhPIcYu
4vcMeM3579UV/D8dmtX6Ja7h79Uwr2B8exPnYtiVH5e6q+D/AK2ljzM=
                    "]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQ7Tlxjhi/8Aw7meNnHJkYPthD+CvsZL5ObGYB8r/n
fA3w5ttk98Yy7igbXH6H3ePZmuycQP6crc53Lonvs1vV9MmDG67+kJ3T9r1d
vHD1J+weO4TxCQH5RcoFPwtET9tVvFMMEIHrP2f3v/79RDG4/kt2NyU7RaXh
+m/YNVw6IKMC5MdFsXE4TLlp1zSvP04Nbt5tu1Vy8Qs04Obds/tv9k9ZF27e
I7vfko7aZnDzXtgpSFyz9ADyr5QG9i+//MLuW9Gqai+4+S/tujTr9/rAzX9t
J/NFwzEQbv47O5lVDR5RcPM/2V0wcwjPgZv/w67h5r+SCUB+x0ax2S2XLO2N
XPz/bOT8YP/vTKLSG0FP+zP7P7y6IfTBfmcU+7P5GyPsT/2I5zZX/WA/TfHW
8crGDHu711+3mnh9sGdtPbwjLbPCPu+F+EKLqR/s95hZGMbGdtgfvfVje5X+
R/sZ/UW5EeEz7Kdp7khfV/rJfuuy0+9SW5bbV9+f2+wt/dX+5+eGIq8XG+37
ePTEynJ+2JtuTshb+nG7fYzq6xMmpn/sT6bfi+aYvNe+PKdAskeFweEIm/kX
oesH7QMcKxQWb2Zy8L/iu3nphiP2BkdPxjlWsDpofDxmdKv6uL0O31nZqTM4
HKaxnWR803zK/pSt8YOaNh6HDWKzTjJGnLU/r5fxqChZwGEDf1VBlckF++qb
UvuvCgg7xE7s+/F10UV7X3PRg84/RR02WV1JcOK6bH+l3rhAy1XSITDhXsHf
/iv2M9uL1GJzZR3cmANqd/2+an+oN/rHth8KDm1KbYbPWq/bu278GSF1Wdkh
N/Pt0UccN+1TzKsim6TVHVbp7gl7WHjL/s4Tb77eNVoORnn+/X4/b9uvSC9U
n6Gv78Cv43Vkb9pd+77+T8kTeY0cpgiW3fx75p79pb6sy9a3TBxu+9zZIHLw
vn3hn4W+WiLmDgBgum6W
                    "]]}}}, {GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                  Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                    RGBColor[1, 0, 0], 
                    Dashing[0.01], 
                    Thickness[0.01], 
                    AbsolutePointSize[6], 
                    AbsoluteThickness[1], {{{
                    Dashing[None], 
                    CircleBox[{0., 1.}, 
                    Offset[3]]}}, {}}}, 
                    DynamicBox[
                    Typeset`ToBoxes[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {124, 1}, 3, CompressedData["
1:eJw1jH0s1HEcx+kB0wPu0NPyuDYTFpEe7yuKnctDtZUpT7XIhi5yPahWHq6b
hoyVSbNqutayzmGu1v0+eTrnoTrncHd0/Kw8lHRCXLnU1qc/Pvvs83m/Xm/n
U+eOnFlmYmJi+neu/p38nOczS0s0hO8tPelhpIE5l9Ua9ZOGikTOvZpZGl6w
P+8+PUGDysotW6akwbHisXVBFQ11deWeGzk0SIRPmEb+MLhKjD+klUPgZbg6
Ktqpg29Sfy+/2kGIXnn7ckPIAGQpNmzulGpgNuPi8Jo9alhXnioMV/aBPqhS
5sTphQxu8oT+Qw+EZy7z0F9UwpCxT3ZjRgG+DEGHA+M92G3TNMSadIHwd9vH
xUU5FCjH1t/zlMFQ9XXjUedmyCsMnljNfgMeXy1XdSe9ApFDS9OB6DqQ1FM2
CcnVIOV0xzW7P4SQwUr343o+WOczZ1tL+aD2vyX13cWHsyVpkYzsPBCE7uO9
ZeaCXKJtDPK/CXfct4rjF3ngxGccZB3kgYg29G8qzARFmdzY53gBrM0T2WFB
58G5bX9jhm0SsIsr7K2YC9QKx0Btk3ieop6PPeAdmad85T5bdMU/KKcl+fZq
6zlqPmUukrP2OyX+WW67VD1NpQgC1OKwaWrk8e24jQV6qqI+aFC5bor61zeO
PWPYM4o9n7BnBH0a/WH0deir0etDrxc9JfIK5N8hL0euFbkmzCnMJfgX4/0U
d9n/zcI/Czm8JSzswX8T/uWsdFeugWvXifk7zJWYq1mx0WYWAaUa5AaQ0yE3
gtw4S5V5uEjYM478BPJfkJ9C/jvyCyxBjf39XOUu8rsrwWXShk1eRpuPVtZE
kbvO2rbLN8+SlXnNksTkS+T1jp3eMTECUlaUnhp1vIzUP+mcOpMrJIaZG+mh
4zXErzY+rWq6gbQn6U5YlEhJi5n/LKO/kUSowmqrRC3EbVrmo81qI3fN2k0n
czqIyL683TTqLRFZXeFe8VWQmOLChblH3US8WxUfaNlDDsfruMYiFQleHnnt
1a9ewnfhe4/m9ZPU5K+tIxYa8szz9TH6vJb4pEUUhRsGiJVHaIs08QMpteFp
jF06MnBoUGTbOET+AOTCDbY=
                    "], CompressedData["
1:eJw1jH0s1HEcx+lB1hPuRA8r1NpMtJLS430rpZ3LQ7WVKaVaZIsucoVq5eG6
MWQZdl2zMq61rHOYy9zvk6dzojrncHc4flYeetCJw8mltj798d1n3/f79Xq7
Xbp+8oq1lZXVnb8vI/XVxPw8DUH78855WmhgmpKbQmdpEEVyCsonaXjN/rL3
8igNGjv3FIWaBhdRsX1WCQ2VlUKvtRwaZOJSpoU/AJtklil5UT9sNd8Zkuw2
wA+579adFb0QtjgzsfpYDySr1qxvletgMv7WwIp9WnAWxoiD1F1g9CtSuHI6
IZ4bPWrs64CghAWexltq6Ld0Ke5PqMCHIXi3gfERVm3TVZ+3agPx7+ZPc3NK
yFIPry7wUkB/2T3LKbcGSM/2H13Ofgue35cua4+qAcmGxvojYZUgq6IcLkaX
gZzTfqHB4xkc6y3yOGPkg30Gc7Ipjw9a34dynz18uPo4NoSRkg6CgAO898w0
UMr0dX6+D+CRxxZpxBwPXPmMo6yjPJDQ5u512QmgKlRaulxugv2SSHag3w1w
az5UF+8YBexckZMdc4Za5HJYXy+dpqhXw095J6cpH6X3ZkPuFOU6r9xRZm+i
pq+ZQjgrf1LSWaHjfNk4dU1wUCsNHKcGizMvrM0yUqIqv1618xj1b28Ed4Zx
Zwh3PuPOIPo0+gPoG9DXoteFXid6auRVyH9AXolcE3L12FPYyzCX4v8F3sL/
l4U5Czn8y1i4g3k95kpW3CaumbuqFfsP2Kux17LOh9nYHszTIdeDnAG5QeRG
WJqEEznijhHkR5H/ivwY8j+Rn2EJyp2epKn3kN9tFzd+c2CTN2FLhorKQ0m+
m7458cFVsji9QRYZfZvU7tq9PTxcQApz4mJCzxSSqtLWsStpYmKeuB8XMFJO
dlZExJaMV5OWKMNZ28dy0mjjO8noriPBmsCKEkkjcR9XeOuTm0m+TYv1t9R3
ROIkbLEOfU8kdkncJB8VCc/NnjE9byfSvZqIw0s7yIkIA9eSoyH+C0Pu1vzq
JPyN/O1D6d0kJvp706Ctjrz0qj1N39AT79jgnCBzD7HzDGiUR/aRPAeeztJm
ID3HeyWOdf3kD9ZCDbQ=
                    "], CompressedData["
1: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
4Nr6MyddOQr+Xzaj/Bs=
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1:eJw1jH0s1HEcx+lB1hPuRA8r1NpMtJLS430rpZ3LQ7WVKaVaZIsucoVq5eG6
MWQZdl2zMq61rHOYy9zvk6dzojrncHc4flYeetCJw8mltj798d1n3/f79Xq7
Xbp+8oq1lZXVnb8vI/XVxPw8DUH78855WmhgmpKbQmdpEEVyCsonaXjN/rL3
8igNGjv3FIWaBhdRsX1WCQ2VlUKvtRwaZOJSpoU/AJtklil5UT9sNd8Zkuw2
wA+579adFb0QtjgzsfpYDySr1qxvletgMv7WwIp9WnAWxoiD1F1g9CtSuHI6
IZ4bPWrs64CghAWexltq6Ld0Ke5PqMCHIXi3gfERVm3TVZ+3agPx7+ZPc3NK
yFIPry7wUkB/2T3LKbcGSM/2H13Ofgue35cua4+qAcmGxvojYZUgq6IcLkaX
gZzTfqHB4xkc6y3yOGPkg30Gc7Ipjw9a34dynz18uPo4NoSRkg6CgAO898w0
UMr0dX6+D+CRxxZpxBwPXPmMo6yjPJDQ5u512QmgKlRaulxugv2SSHag3w1w
az5UF+8YBexckZMdc4Za5HJYXy+dpqhXw095J6cpH6X3ZkPuFOU6r9xRZm+i
pq+ZQjgrf1LSWaHjfNk4dU1wUCsNHKcGizMvrM0yUqIqv1618xj1b28Ed4Zx
Zwh3PuPOIPo0+gPoG9DXoteFXid6auRVyH9AXolcE3L12FPYyzCX4v8F3sL/
l4U5Czn8y1i4g3k95kpW3CaumbuqFfsP2Kux17LOh9nYHszTIdeDnAG5QeRG
WJqEEznijhHkR5H/ivwY8j+Rn2EJyp2epKn3kN9tFzd+c2CTN2FLhorKQ0m+
m7458cFVsji9QRYZfZvU7tq9PTxcQApz4mJCzxSSqtLWsStpYmKeuB8XMFJO
dlZExJaMV5OWKMNZ28dy0mjjO8noriPBmsCKEkkjcR9XeOuTm0m+TYv1t9R3
ROIkbLEOfU8kdkncJB8VCc/NnjE9byfSvZqIw0s7yIkIA9eSoyH+C0Pu1vzq
JPyN/O1D6d0kJvp706Ctjrz0qj1N39AT79jgnCBzD7HzDGiUR/aRPAeeztJm
ID3HeyWOdf3kD9ZCDbQ=
                    "] -> CompressedData["
1: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
4Nr6MyddOQr+Xzaj/Bs=
                    "]]]][
                    Part[#, 1]]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     3]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     1]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                     TraditionalForm, Graphics]]}, AspectRatio -> 
                  NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
                  AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, AxesStyle -> 
                  Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], 
                  BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                    RGBColor[1, 0, 0], 
                    Dashing[0.01], 
                    Thickness[0.01], 
                    AbsolutePointSize[6], 
                    AbsoluteThickness[1], {{{
                    Dashing[None], 
                    CircleBox[{0., 1.}, 
                    Offset[3]]}}, {}}}, FrameStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], FrameTicksStyle -> 
                  Directive[FontFamily -> "Times", FontSize -> 10], 
                  GridLinesStyle -> {
                    GrayLevel[0.85], 
                    GrayLevel[0.9]}, ImageSize -> 200, 
                  LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"}, 
                  Method -> {}, 
                  PlotRange -> {{-0.5625, 0.5625}, {0., 23.0787704964136}}, 
                  PlotRangeClipping -> True, PlotRangePadding -> {
                    Scaled[0.02], 
                    Scaled[0.02]}, Prolog -> {
                    Opacity[0], 
                    TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                  TicksStyle -> 
                  Directive[FontFamily -> "Times", FontSize -> 10]}], 
                FontFamily -> "Times", 10, StripOnInput -> False], 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  FormBox[
                   TagBox[
                    FormBox[
                    TemplateBox[{"t", 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {4, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[4]], "\"from \"", 
                    RowBox[{"-", 
                    TagBox["0.6", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "0.6"]]}], 
                    "\" to \"", 
                    TagBox["0.6", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "0.6"]]}, 
                    "RowDefault"], TraditionalForm], 
                    Format[#, TraditionalForm]& ], TraditionalForm], 
                  "\[NoBreak]", "\")\""}], {
                FontFamily -> "Verdana", FontSize -> 10, 
                 GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "Labeled", 
              DisplayFunction -> (FormBox[
                GridBox[{{
                   TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"], 
                   ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], TraditionalForm]& ), 
              InterpretationFunction -> (RowBox[{
                 StyleBox[
                 "Labeled", FontFamily -> "Bitstream Vera Sans", 
                  FontSize -> -1 + Inherited], "[", 
                 RowBox[{#, ",", #2, ",", 
                   RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Center", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                 "]"}]& )], 
             $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Series expansion at t=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAtX=x0", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[(-E^(4 t) + E^(8 t))/(4 t), {t, 0, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"1", "+", 
                    RowBox[{"6", " ", "t"}], "+", 
                    FractionBox[
                    RowBox[{"56", " ", 
                    SuperscriptBox["t", "2"]}], "3"], "+", 
                    RowBox[{"40", " ", 
                    SuperscriptBox["t", "3"]}], "+", 
                    FractionBox[
                    RowBox[{"992", " ", 
                    SuperscriptBox["t", "4"]}], "15"], "+", 
                    FractionBox[
                    RowBox[{"448", " ", 
                    SuperscriptBox["t", "5"]}], "5"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["t", "6"], ")"}], 
                    SeriesData[$CellContext`t, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"t", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "6", ",", 
                    FractionBox["56", "3"], ",", "40", ",", 
                    FractionBox["992", "15"], ",", 
                    FractionBox["448", "5"]}], "}"}], ",", "0", ",", "6", ",",
                     "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtX=x0__More terms"}, {}]}]}], Typeset`pod4$$, 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
     "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.984", 
     "parsetiming" -> "1.244", "parsetimedout" -> "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa80921i1faa344074ih800005849bfa12g02d7g0&s=40", "id" -> 
     "MSPa81021i1faa344074ih800002f752bfid1dgd1a1", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "40", "related" -> 
     "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa81121i1faa344074ih800002hhii4e733g477da&s=40", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
     "0.47400000000000003", "parsetiming" -> "0.", "parsetimedout" -> "false",
      "recalculate" -> "", "id" -> "", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "40", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 4, 5, 20, 50, 49.3694965`9.446033553555194}, "Line" -> 
    27, "SessionID" -> 18252417980437539623}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "limit of (E^(8 t) - E^(4 t))/(4 t)as t approaches 0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{790., {195., 202.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa80921i1faa344074ih800005849bfa12g02d7g0&s=40", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.700378249410495*^9},ExpressionUUID->"e07bccdc-54a6-445d-899c-\
26e0bc23d58c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.700353932499009*^9, 
  3.7003539347589693`*^9}},ExpressionUUID->"24ab7457-2400-4d07-8cbe-\
3c5457c93e56"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"limit", " ", "of", " ", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"4", " ", "x"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", "x"}], "+", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"4", " ", "x"}]], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"8", " ", "x"}], "-", "1"}], ")"}]}], "+", "1"}], ")"}]}], 
    RowBox[{"4", " ", 
     SuperscriptBox["x", "2"]}]]}]], "Input",
  CellChangeTimes->{{3.7003530934953227`*^9, 3.700353158540339*^9}},
  ExpressionUUID->"c8606c48-63a5-42d0-97f2-1e013f6f32c1"],
 "as x approaches 0"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.700378288673504*^9, 3.7003783158235064`*^9}, {
  3.700378418868147*^9, 
  3.700378434602151*^9}},ExpressionUUID->"267876c8-f2df-4c05-bf9a-\
3ae23877b2a2"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "limit of (E^(4 x) (-4 x + E^(4 x) (8 x - 1) + 1))/(4 x^2)as x approaches \
0", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Limit__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "Limit", "id" -> "Limit", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Limit[(E^(4 x) (-4 x + E^(4 x) (8 x - 1) + 1))/(4 x^2), x -> 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 UnderscriptBox["lim", 
                  RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                 StyleBox[
                  FractionBox[
                   RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "4"}], " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], ")"}]}], "+", "1"}], 
                    ")"}]}], 
                   RowBox[{"4", " ", 
                    SuperscriptBox["x", "2"]}]], ScriptLevel -> 0, 
                  StripOnInput -> False]}], "\[LongEqual]", "6"}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Find the following limit\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}], 
                    "+", "1"}], HoldForm], ")"}]}], 
                    RowBox[{"4", " ", 
                    SuperscriptBox["x", "2"]}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}], 
                    "+", "1"}], HoldForm], ")"}]}], 
                    RowBox[{"4", " ", 
                    SuperscriptBox["x", "2"]}]], HoldForm], "\[LongEqual]", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], ")"}]}], 
                    RowBox[{"4", " ", 
                    SuperscriptBox["x", "2"]}]]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], ")"}]}], 
                    RowBox[{"4", " ", 
                    SuperscriptBox["x", "2"]}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"By the product rule,\\n\"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], ")"}]}], 
                    RowBox[{"4", " ", 
                    SuperscriptBox["x", "2"]}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], "\" \[LongEqual] \"", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], 
                    SuperscriptBox["x", "2"]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], ")"}]}]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    FractionBox["1", "4"]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm], " ", 
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm], " ", 
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], 
                    SuperscriptBox["x", "2"]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], "\" \[LongEqual] \"", 
                    SuperscriptBox["\[ExponentialE]", 
                    TagBox[
                    RowBox[{"4", " ", "0"}], HoldForm]], "\" \[LongEqual] \"",
                     "1"}, "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], 
                    SuperscriptBox["x", "2"]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Applying l'H\[OHat]pital's rule, we get that\\n\"", 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], 
                    SuperscriptBox["x", "2"]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], "\"\[LongEqual]\"", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    RowBox[{
                    FractionBox["\[DifferentialD]", 
                    RowBox[{"\[DifferentialD]", "x"}]], "(", 
                    TagBox[
                    RowBox[{"1", "-", 
                    RowBox[{"4", " ", "x"}], "+", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], ")"}], 
                    RowBox[{
                    FractionBox["\[DifferentialD]", 
                    RowBox[{"\[DifferentialD]", "x"}]], 
                    SuperscriptBox["x", "2"]}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False]}, {"\"\"", "\"\[LongEqual]\"", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "4"}], "+", 
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], "+", 
                    RowBox[{"4", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", "x"}], "-", "1"}], HoldForm], ")"}]}]}],
                     HoldForm], 
                    RowBox[{"2", " ", "x"}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False]}, {"\"\"", "\"\[LongEqual]\"", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "+", 
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}]}], HoldForm], 
                    ")"}]}], "x"]}], ScriptLevel -> 0, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, "RowDefault"], "\"\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{
                    FractionBox["1", 
                    TagBox["4", HoldForm]], 
                    TagBox[
                    GridBox[{{
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "+", 
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}]}], HoldForm], 
                    ")"}]}], "x"]}], ScriptLevel -> 0, StripOnInput -> False],
                     HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"]}], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "+", 
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}]}], HoldForm], 
                    ")"}]}], "x"]}], ScriptLevel -> 0, StripOnInput -> False],
                     "\" \[LongEqual] \"", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "+", 
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}]}], HoldForm], "x"]}],
                     ScriptLevel -> 0, StripOnInput -> False], ")"}]}]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    
                    GridBox[{{"2"}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm], " ", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "+", 
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}]}], HoldForm], "x"]}],
                     ScriptLevel -> 0, StripOnInput -> False], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{
                    FractionBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "+", 
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], " ", "x"}]}], HoldForm], "x"], 
                    "\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], "+", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], "x"]}], 
                    HoldForm]}, "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    GridBox[{{
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], "+", 
                    TagBox[
                    GridBox[{{
                    FractionBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], "x"]}}, 
                    AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"]}], HoldForm], ")"}]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], "+", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], "x"]}], 
                    HoldForm], ")"}]}], ScriptLevel -> 0, StripOnInput -> 
                    False], "\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{"8", " ", 
                    RowBox[{"(", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], ")"}]}], "+", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], "x"]}], 
                    ScriptLevel -> 0, StripOnInput -> False]}], HoldForm]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{"8", " ", 
                    RowBox[{"(", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], ")"}]}]}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm], "+", 
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], "x"]}], 
                    ScriptLevel -> 0, StripOnInput -> False], HoldForm]}}, 
                    AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}], HoldForm], TraditionalForm],
                     DisplayForm], ")"}]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], "\[LongEqual]", 
                    SuperscriptBox["\[ExponentialE]", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    RowBox[{"4", " ", "x"}]}], ScriptLevel -> 0, StripOnInput -> 
                    False]]}]}, "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["8", HoldForm], " ", 
                    TagBox[
                    TagBox[
                    GridBox[{{
                    SuperscriptBox["\[ExponentialE]", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    RowBox[{"4", " ", "x"}]}], ScriptLevel -> 0, StripOnInput -> 
                    False], HoldForm]]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}], "+", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], "x"]}], 
                    ScriptLevel -> 0, StripOnInput -> False], HoldForm]}], 
                    HoldForm], TraditionalForm], DisplayForm], ")"}]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    RowBox[{"4", " ", "x"}]}], ScriptLevel -> 0, StripOnInput -> 
                    False], "\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{"4", " ", "0"}], HoldForm], "\" \[LongEqual] \"", 
                    "0"}, "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["8", HoldForm], " ", 
                    SuperscriptBox[
                    TagBox["\[ExponentialE]", HoldForm], 
                    TagBox[
                    TagBox[
                    
                    GridBox[{{"0"}}, AutoDelete -> False, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    True}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]]}], "+", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], "x"]}], 
                    ScriptLevel -> 0, StripOnInput -> False], HoldForm]}], 
                    HoldForm], TraditionalForm], DisplayForm], ")"}]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    SuperscriptBox["\[ExponentialE]", "0"], HoldForm], 
                    "\[LongEqual]", "1"}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["8", HoldForm], 
                    StyleBox["\[Times]", FontColor -> GrayLevel[0.5]], 
                    TagBox["1", HoldForm]}], "+", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], "x"]}], 
                    ScriptLevel -> 0, StripOnInput -> False], HoldForm]}], 
                    HoldForm], TraditionalForm], DisplayForm], ")"}]}], 
                    RowBox[{
                    TagBox["4", HoldForm]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Applying l'H\[OHat]pital's rule, we get that\\n\"", 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], "x"]}], 
                    ScriptLevel -> 0, StripOnInput -> False], 
                    "\"\[LongEqual]\"", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    RowBox[{
                    FractionBox["\[DifferentialD]", 
                    RowBox[{"\[DifferentialD]", "x"}]], "(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]], "-", "1"}], HoldForm], ")"}], 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "x"}], 
                    RowBox[{"\[DifferentialD]", "x"}]]]}], ScriptLevel -> 0, 
                    StripOnInput -> False]}, {"\"\"", "\"\[LongEqual]\"", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}], "1"]}], ScriptLevel -> 0, 
                    StripOnInput -> False]}, {"\"\"", "\"\[LongEqual]\"", 
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    RowBox[{"4", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}]}], ScriptLevel -> 0, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, "RowDefault"], "\"\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    RowBox[{
                    TagBox["2", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"8", "+", 
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    RowBox[{"4", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}], HoldForm], TraditionalForm],
                     DisplayForm], ")"}]}], 
                    TagBox["4", HoldForm]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    UnderscriptBox["lim", 
                    RowBox[{"x", "\[Rule]", "0"}]], "\[ThinSpace]", 
                    RowBox[{"4", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"4", " ", "x"}]]}]}], ScriptLevel -> 0, 
                    StripOnInput -> False], "\" \[LongEqual] \"", 
                    RowBox[{"4", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    TagBox[
                    RowBox[{"4", " ", "0"}], HoldForm]]}], 
                    "\" \[LongEqual] \"", "4"}, "RowDefault"]}, "RowDefault"],
                     "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"8", "+", 
                    TagBox[
                    TagBox[
                    
                    GridBox[{{"4"}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}], HoldForm], TraditionalForm],
                     DisplayForm], ")"}], " ", 
                    TagBox["2", HoldForm]}], HoldForm], 
                    TagBox["4", HoldForm]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"8", "+", "4"}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], " ", 
                    TagBox["2", HoldForm]}], ")"}]}], HoldForm], 
                    "\[LongEqual]", "6"}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Arial", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox["6", HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Limit__Hide steps"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "\[DoubleStruckCapitalR] is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Limit", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(E^(4 x) (-4 x + E^(4 x) (8 x - 1) + 1))/(4 x^2), {x, -0.75, \
0.75}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               StyleBox[
                GraphicsBox[{{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
                    "]], 
                    LineBox[CompressedData["
1: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
BH1xT9vVveNrnK6j7tVH8sV/Aej+xqI=
                    "]]}}}, {GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                  Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                    RGBColor[1, 0, 0], 
                    Dashing[0.01], 
                    Thickness[0.01], 
                    AbsolutePointSize[6], 
                    AbsoluteThickness[1], {{{
                    Dashing[None], 
                    CircleBox[{0., 6.}, 
                    Offset[3]]}}, {}}}, 
                    DynamicBox[
                    Typeset`ToBoxes[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {353, 1}, 3, CompressedData["
1:eJw1j3s01HsXxpVUSlQcB3Vco5KE7olNpZSjODmKkgrVEaLoQqTrKyoiRBMG
uZ1cByHNHocpQmbGYAzDXJgRwpEixGut9/f+8f3utZ/n8zxrba2zl/7wmC8l
JTVv7p2Z+9zyo4ZnZyWoNKWmZzotwZr9r05enZCgXld53eCIBPvlRGntAgn6
em49TqmWYIgul3buPxJMfKET3SgvweTusEv2smJUZhw9sv6XXqy1O7qvXrcH
rdfr+utoi/DkoqE1zuoi9O0tbYlSE2E82Xr7zEoRilW9JjnSIry3hBL6pFeI
VQMWj39kCXFX3smMpk1CzG1ZblSyQYiaP2vKE9cKceHvGxs9NITI+vzz65S8
ED11ky3XDQkwkSToDH0twMnwc4om6wWYd+8SXV9XgGdDrl/T0RLgR7/wDiXV
Oe54Xtr4YgHu1Pu++V0fH69X3XewzuLjt/H02FNr+egc9iaepMNHmsrHBK4G
Hx/tHH7pqMJH7aCdGYdl+Zgy/cI7uLUbj8kO5Zud6sYa7egtVO8uPNz6uD/e
ows5Dx+m+Ll04eBIqJyubRcq4qWeCIMuPHvC9pnTAA+lni0eG7vAQ1OZW5QN
7p24TvxYNupkJyp/ILmOOXTiSFjF0ndWnZgh993t8NpOXKnkreTX34F92icC
Sn078JnF9u2WwVyUfj/Mqw/g4mWbrHuOPly0d1RlXXTlorzXlFecJRfD4jF1
QIaLN4cOyMc9aUc30vHe/mQORhVLzJrjOUhtuBr3NpKDaj+fHXh0i4MMF2b2
RlcOmmsc8vFV56Bqqun4N1IbNmWqy85LbMXTX2jz/KNbcdTEbVIc3opK1MyB
hqBWPM42+vTcpRWFUntjjLRa8bvT+d9OZ7WgulyBMZay0adnXWdkHhupleQH
pzPY6OId0zEvjo2kT1fv7wtgo+pTs/a6zWxUUq4PZRc04xJNcdPnHBZ2khbX
81NZmKu64X1bIgvtFH0r6eEsjFs4mUX2ZKH2l2V3nPRZaFqxdUtdNhO9HO4/
z8piIHmmYrM+mYGtWSOf/k5goMXPEzL54QxUyjC5XOLFwHfj3Tb/GDFw9baA
mTd+TXi6urtePboRD5hNePBuN6Lhm+VSJL9GnM6x3KJq34jPo9NIissbkXHm
vPfiJw1oKTUsP/qwHrXNZuzpt+uQscLMIOFyHYaIgxZ6u9UhN/JHhZJVHcYI
x3TcF9fhgrCBb/Mja1HM4iRYkD5g9gWK4G0pHdlnkzVsMugo5RLhwo2lo6O9
W/uEPx3n71Jkbt1MR+elV2j5+TW4JM8kOS2rGj2/Fp6MSKzChG3/mp4Pr8La
G0ar9gZWoa5UfvukUxXy5V47eqpW4Z96GXYHn9PwdtGWh/IGiIYhMk4Ldd6i
WgUjvm/BW5T5/qL1o7gCO71NHCJzKjDcxfWIikkFSnaXW+lblmPKlJfJYdc3
qHiDvTTuBQUnZn+sGA6kYNcDDRVrZwpmPfNcM6lCQfMCKbNTcUX4l8TAR+9p
IYb8vYTsvSwf29y99PNFGUjl2W0vzcjADMet+979lYH+1jMu9cOvcLlB1FPJ
VDoe/EqZ0FBKwwDp8cdaD5PwWqD+k7rYJ3jvTU1i0aon+HTsVOYL8mP82yeG
5p37CLvPTo+uoIfjAZtPx5zHHuDGHT17Wl+F4IEilZNZhcF4xsA2IPDdTYzV
LM1UbwnEn4vD5M4vuIYJlGOvh+k+aFT6rrxYTgrzQnIbpRNmqT+jutcmqcxS
E0v2drJ+naGyZ5Za7Vaeplo/JSkrKE5Q49I++WZHj1N7S6Tq964cp97hut+6
vuI7tVJnY59AYYz6v74RomeY6BkiegaJnj4iLyHyYiLfQ+T5RK6LyHUSOQ7B
txI8m+AZBNdAcLWEX0P4NEIvI/YCYqb8f5oTujnBETvNnOgh9FpCZ5h/9/pm
ZyPPInw24XMIn28e89RJJnSZgOCEBNdDcH0EN2IuTItwVXs8QvD/EvwowY8R
/ATBS8FCLYWV0tstwWGzpdfLUjsI2u2c4Hn1NChUiTfZO/qCk/TGoH37QyFk
DUPT3DwKlpeQv+7alQJLftVmUa+mwIIbqQV7KCnwY3ea9yEDMghr0iVO6qlA
YWd2XJ+fDo5judWlHzOBtLkixuREPqTO3hfVkvIhu95+s2tXPnQU+n+mGxVA
30G5h6OUApAONK21qSiEHdyE/TPvKZCa6LjXjf8GkoZi18VKlUHinpZlHzTL
ILr/KEf/TBnc2WXvPSoogzNcm/jbonLQVLMcSBa/hZcJG2I6BxFkVitM+8nQ
YPfFsLwAJRrkyAYpBpvQ4P7+07wInzmdpu+XLZ7TKfi8p7UKHiR+lji/qQaL
mpJtaR+qYfLL7fsDbdXgY6mmc3OiGhz7Dp16ubMG9La9Zne/rYH3TJ8qdxod
ZGTHEn3qPsBEW0I2mfMB+jOgjC35AIx9ES27FtYCKVR7+aK9tbBlwu5+cmUt
nJXkXmLk1wGVfn6fSVw95M4drfKqHkhMOY1ZSj0E8Qp/1DPrYce3qTyPZQ1Q
uCZKNeFeA6TfLRuavdwIEZayCY1HmmCGnJc64doEvvMdXuv4NoFDdRLeiGoC
dastYl1mExxPz1eF9Qzoz+Sei89hgEK+0TzrXCb0GI/0soqZUFGc/9Glkgnn
KgyfXalnQiXdYG3yZyZc6Fxn+12XBf/IaiWkJ7EgwH2F8byoZnjkMOlm+LwZ
0veJ4k6kNANrTcl0SUEzGPYer/VkNkOfR4oreyUbnM9vepIZywbwtB2wfdEC
owY6ISOpLZAxPLE8JqcF5APSt3HKW6Dz1tTts5wWuB6brXLtl1YoosnsT4ls
Bb1fqSmjd9vg+NZ+oU9EG4QfVdYdiG6DL5E+2SJyGxQv1ihiYxvsmbxVXTrV
Bqd4luLAKxyIT6NvkHZrhyWbVlVqXWyHkArf3y2utIM7c5V38N12MJn1yxtP
a4cGZ3XjwZ52mLfy2raWc1y4GLrOMtOzAwK7PI1NL3dA+O5craYbHZAzYTx/
PKwD+n1Nq/dndsCFM4etxKIOcN/jf1DXpRNOLqDZpx3hQW7Thqj2YzyYSYz/
pHCaB2TjSzY3fXkgPqVu9edTHviV39yxqJkHD3x2alx07IJCTtGgiUs3hM76
c/d4dIOd3vbaP7y7YejK27TLwd1goFDjXPSyG7KsWmqNu+b89qA/nm/ig/X+
JMP4Aj7M/BPQ4lTMh2Kwvbm6jA+aO6fryMiHiQ3OHq8/8SFrhTKpapAPi3iP
ZQfXCeD9leAeC7IAfsv8q8jhlQD8uX+GXsgWgJal4eqoQgHclO8+2l0lAJNs
i+pgoQCSuqRTK3SEcPVguOuWDCGsEnvx5ucIgXbnyAlmrhCWVCod8ykRQpJh
8uGsGiG8Vyw2Wy0SgnIXb9UCTRGUXDbmNCeIQM0MN0a+FEHIItu7h8giWNNw
Z23v3PwvhpTnSA==
                    "], CompressedData["
1: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
/wtpxOdG
                    "], CompressedData["
1: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
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1: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
/wtpxOdG
                    "] -> CompressedData["
1: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
                    "]]]][
                    Part[#, 1]]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     3]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     0]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                     TraditionalForm, Graphics]]}, AspectRatio -> 
                  NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
                  AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, AxesStyle -> 
                  Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], 
                  BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                    RGBColor[1, 0, 0], 
                    Dashing[0.01], 
                    Thickness[0.01], 
                    AbsolutePointSize[6], 
                    AbsoluteThickness[1], {{{
                    Dashing[None], 
                    CircleBox[{0., 6.}, 
                    Offset[3]]}}, {}}}, FrameStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], FrameTicksStyle -> 
                  Directive[FontFamily -> "Times", FontSize -> 10], 
                  GridLinesStyle -> {
                    GrayLevel[0.85], 
                    GrayLevel[0.9]}, ImageSize -> 200, 
                  LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"}, 
                  Method -> {}, 
                  PlotRange -> {{-0.75, 0.75}, {0., 340.17808550674283`}}, 
                  PlotRangeClipping -> True, PlotRangePadding -> {
                    Scaled[0.02], 
                    Scaled[0.02]}, Prolog -> {
                    Opacity[0], 
                    TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                  TicksStyle -> 
                  Directive[FontFamily -> "Times", FontSize -> 10]}], 
                FontFamily -> "Times", 10, StripOnInput -> False], 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  FormBox[
                   TagBox[
                    FormBox[
                    TemplateBox[{"x", 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {4, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[4]], "\"from \"", 
                    RowBox[{"-", 
                    TagBox["0.8", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "0.8"]]}], 
                    "\" to \"", 
                    TagBox["0.8", 
                    $CellContext`TagBoxWrapper["StringBoxes" -> "0.8"]]}, 
                    "RowDefault"], TraditionalForm], 
                    Format[#, TraditionalForm]& ], TraditionalForm], 
                  "\[NoBreak]", "\")\""}], {
                FontFamily -> "Verdana", FontSize -> 10, 
                 GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "Labeled", 
              DisplayFunction -> (FormBox[
                GridBox[{{
                   TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"], 
                   ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], TraditionalForm]& ), 
              InterpretationFunction -> (RowBox[{
                 StyleBox[
                 "Labeled", FontFamily -> "Bitstream Vera Sans", 
                  FontSize -> -1 + Inherited], "[", 
                 RowBox[{#, ",", #2, ",", 
                   RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Center", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                 "]"}]& )], 
             $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAtX=x0", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(E^(4 x) (1 - 4 x + E^(4 x) (-1 + 8 x)))/(4 x^2), {x, 0, \
5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"6", "+", 
                    FractionBox[
                    RowBox[{"112", " ", "x"}], "3"], "+", 
                    RowBox[{"120", " ", 
                    SuperscriptBox["x", "2"]}], "+", 
                    FractionBox[
                    RowBox[{"3968", " ", 
                    SuperscriptBox["x", "3"]}], "15"], "+", 
                    RowBox[{"448", " ", 
                    SuperscriptBox["x", "4"]}], "+", 
                    FractionBox[
                    RowBox[{"65024", " ", 
                    SuperscriptBox["x", "5"]}], "105"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", 
                    FractionBox["112", "3"], ",", "120", ",", 
                    FractionBox["3968", "15"], ",", "448", ",", 
                    FractionBox["65024", "105"]}], "}"}], ",", "0", ",", "6", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtX=x0__More terms"}, {}]}]}], Typeset`pod4$$, 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`aux1$$ = {True, False, {False, False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
     "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.364", 
     "parsetiming" -> "1.401", "parsetimedout" -> "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa2301i9b10de1h20ih39000049dibhd502d0g126&s=14", "id" -> 
     "MSPa2311i9b10de1h20ih3900001e4e5aa814hb83de", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "14", "related" -> 
     "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa2321i9b10de1h20ih3900005cda0g268778833f&s=14", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.659", 
     "parsetiming" -> "0.", "parsetimedout" -> "false", "recalculate" -> "", 
     "id" -> "", "host" -> "http://www3.wolframalpha.com", "server" -> "14", 
     "related" -> "", "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 4, 5, 20, 53, 58.4941484`9.51968725354629}, "Line" -> 30,
     "SessionID" -> 18252417980437539623}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "limit of (E^(4 x) (-4 x + E^(4 x) (8 x - 1) + 1))/(4 x^2)as x approaches \
0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{790., {1275., 1282.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa2301i9b10de1h20ih39000049dibhd502d0g126&s=14", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.70037843877314*^9},ExpressionUUID->"27cdade0-a279-4b52-b84a-56364d8616e5"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.700378272592497*^9, 
  3.700378290664523*^9}},ExpressionUUID->"aea45ab2-d321-456e-8ff6-\
fb2ac066a27f"],

Cell[CellGroupData[{

Cell["integrate Exp[-0.5z^2] dz", "WolframAlphaLong",
 CellChangeTimes->{{3.700973065244472*^9, 3.700973093473527*^9}, {
  3.7009748788609047`*^9, 
  3.7009749448138433`*^9}},ExpressionUUID->"ddecf7bf-59a9-41fd-bc7f-\
1d816295dd7c"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "integrate Exp[-0.5z^2] dz", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["minput", {}, {"Integrate[Exp[-0.5 z^2], z]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                RowBox[{"\[Integral]", 
                  RowBox[{
                    RowBox[{"exp", "(", 
                    RowBox[{
                    RowBox[{"-", "0.5`"}], " ", 
                    SuperscriptBox["z", "2"]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "z"}]}]}], HoldForm], 
               PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"1.2533141373155001`", " ", 
                    RowBox[{"erf", "(", 
                    RowBox[{"0.7071067811865475`", " ", "z"}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "erf(x) is the error function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Erf.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Erf", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Erf.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"erf", "(", "x", ")"}], "\" \"", 
                "\"is the error function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[1.25331 Erf[0.707107 z], {z, -2.8, 2.8}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2390$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2389$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2389$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2390$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2451589$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2389$\
2451590$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2390$2451591$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2390$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2389$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2451589$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2389$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2389$\
2451590$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2390$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2390$\
2451591$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2451320[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1.2533141373155001` 
                    Erf[0.7071067811865475 $CellContext`z], {$CellContext`z, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2389$$], 
                    (
                    Piecewise[{{
                    0. + 3.023715784073818 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.023715784073818 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2389$$], \
-2.8284271247461907`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2389$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2390$$]], 
                    (
                    Piecewise[{{
                    0. + 3.023715784073818 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 3.023715784073818 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2389$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2390$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2389$$ + 
                    0.005656854249492382, 
                    CalculateUtilities`GraphicsUtilities`Private`max2390$$]], 
                    2.8284271247461907`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["z", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["z", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2389$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2390$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2451320]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2451320[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 
                    Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2451320[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVt9v0zAQbikwfjP4D5B4Ruo6HpGADsakASUp7/\
WSS2Lh2sF2tsE/Dz67SZq1qxTTAZrSh1N9aT7ffffd9Z6diCDp93o9ddOYD4LFyQ6enhozFvNcFDx+\
d55LUIoKntzAZ/eMCUEfACM/IHa+28a8F3JOtDu/\
wvcJiwpGNHzVlFFNQc0OJckzGqnaM5H01PxkxkREGP0Jz/\
f2Xw5Ho6GDwVgmRGuQXI3aQuaZJAqSHgLdMuYtI/ybOz4pj58KxkL4XgCPQD023qkksYERnDDMx/\
vW683UA0xMEx4TGV85TVae47YXKC0pT6cwz/GNy8katgUmMlWOm4clN5sU5MK/\
gw9EaGNyHpu0PVsC/cK4ZvRdlNU/526A59dt4aU4W08c5veGIW9E01NQq3S+\
aF0nx0jVtTb6BVdXNV+2GuTlU6b+XzqmSq+Gsdc2DJifmBqv194q/H5beJFj1y/E/\
ciYz85RAq4bDpXgPoq4YIsomikPnETbp6ty43AY9yu+Q3T6VLDCCUycZb/Y/\
titwOtNIcTazbYgHV7PgAByMK7YcntAU6rHGZEkMsCL6/\
plk01FHYrHne1rT3lMzQBzhGxantAcJUt1JzrKvvxRcSu5XGgy5P2Ia0hBbhT9XayPNOTyeCo8Iwnx\
gqZevTmskpoQ6S37QQkS5oRThKS/zMd+cw+XK4FUHUpUl3QsDmxpzv2T6JcFPgae6qy5Y3uOLu+\
2xWwCcVarLqBJsjxttsd0v8l044bmQPclwbck/\
gO92xS6TeGvbgore3C3JnRrQrcmdGtCtyb8v2uCjRj/lX4DFfm4Ng=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[1.25331 Erf[0.707107 z], {z, -17, 17}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2392$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2391$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2391$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2392$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2451925$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2391$\
2451926$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2392$2451927$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2392$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2391$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2451925$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2391$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2391$\
2451926$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2392$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2392$\
2451927$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2451656[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    1.2533141373155001` 
                    Erf[0.7071067811865475 $CellContext`z], {$CellContext`z, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2391$$], 
                    (
                    Piecewise[{{
                    0. + 18.14229470444291 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    18.14229470444291 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2391$$], \
-16.970562748477146`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2391$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2392$$]], 
                    (
                    Piecewise[{{
                    0. + 18.14229470444291 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 18.14229470444291 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2391$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2392$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2391$$ + 
                    0.03394112549695429, 
                    CalculateUtilities`GraphicsUtilities`Private`max2392$$]], 
                    16.970562748477146`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["z", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["z", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2391$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2392$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2451656]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2451656[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 
                    Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2451656[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMtDHGJySggzFpQEnK995ip7Fw7WA72+\
DPg89ukmbtKsV0gKb0w6m+NI/vnnvuek+OZJT2e72evmrNB8lJegNPj60ZylkuC0HeneaKas2kSK/\
gs9vWxNTsUQ4/KPG+69a8l2oGxp9f4fvAk4KDoV8N48wwqif7CvKMJbr2jBQ7tj+ZcJkAZz/p0+\
2dF1u7uy89DMYyAmOoEvp5W8g8U6Bp2kOga9a85SC++\
eOj8vip4Dym3wsqEqofWO9YAbEwUgDHfIJvvdxM3cXEDAgCilw4TU6ew7YXaKOYmI7pLMc3zidrqy0\
wqKn23NwruVmnIB/+TXwgYxeT97ik3dkRGBbGJaPvrKz+OXcDPL9uC6/\
kyWriML83HHkDw46pXqbzWes6eUaqrnXRz7m6qPmy0SDPnzL1/9Ih02Y5jO22YdDZka3xau0tw++\
0hZc5dv1c3Pet+\
ewdJeCq4VAJ7qMkBZ9H0Ux54CXaPl2dW4fHuFPxHaMzpIIVTmTjLPvF9cfDCrzeFGKs3WQD0hH1DIh\
oTq2LOG732JSZYQYKEgs8v65fNtlY1qEE3Nm+9kwQZgeYJ2Td8oTmIF2oO5gk+/\
JHxa3kcqbJkPcDYeiUqrWiv4X1UZZcQcYyMJIYL2jqNZjDKqkRqGDZD0qQOAfBEJL9sh/\
3zT9crARSta9QXcqzOHClOQ1Pol8W+\
JCKqcmaO3bg6ApuW8wmkie16iKWpovTZnNM95tMN25oDvRQEkJLEj7Qu02h2xT+\
6qawtAd3a0K3JnRrQrcmdGvC/7smuIjxX+k3y7C4lg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$, 
   Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence,Sum", "timedoutpods" -> "", "timing" -> "4.032", "parsetiming" -> 
     "0.581", "parsetimedout" -> "false", "recalculate" -> 
     "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa48821dg3g08ba1i387900003a6896607d4cibbh&s=35", "id" -> 
     "MSPa48921dg3g08ba1i3879000018g0i3i92d74221i", "host" -> 
     "http://www3.wolframalpha.com", "server" -> "35", "related" -> 
     "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa49021dg3g08ba1i387900004d4f51462ec4e2cg&s=35", "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence,Sum", "timedoutpods" -> "", "timing" -> "5.099", "parsetiming" -> 
     "0.", "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", 
     "host" -> "http://www3.wolframalpha.com", "server" -> "35", "related" -> 
     "", "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 4, 12, 18, 35, 54.6735114`9.49035180917395}, "Line" -> 4,
     "SessionID" -> 18256494609053942147}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "integrate Exp[-0.5z^2] dz"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{790., {355., 362.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www3.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa48821dg3g08ba1i387900003a6896607d4cibbh&s=35", Typeset`asyncpods$$}]]; 
     Typeset`asyncpods$$ = {}; Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.700974954695674*^9},ExpressionUUID->"7d14c0b6-d047-405b-b7c6-\
8ea3b5c7269c"]
}, Open  ]]
},
WindowSize->{859, 857},
WindowMargins->{{268, Automatic}, {Automatic, 20}},
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (March 13, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 372, 6, 42, "WolframAlphaLong", "ExpressionUUID" -> \
"dc484b9f-c5c8-4754-9082-070b82380edc"],
Cell[955, 30, 147832, 2970, 341, "Print", "ExpressionUUID" -> \
"ffe243c4-5d8b-44a7-a33e-48fb1a2bc7c2"]
}, Open  ]],
Cell[148802, 3003, 164, 3, 30, "Input", "ExpressionUUID" -> \
"2d30a825-1054-4055-8724-cb2720ebf3fb"],
Cell[CellGroupData[{
Cell[148991, 3010, 764, 24, 52, "Input", "ExpressionUUID" -> \
"61b1aa06-242f-46e2-b890-302ae1aca651"],
Cell[149758, 3036, 3373, 76, 241, "Output", "ExpressionUUID" -> \
"509a3d7d-3428-43bc-97d8-e21995587f51"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153168, 3117, 768, 19, 50, "Input", "ExpressionUUID" -> \
"8613382e-2a8b-46ac-8360-617bd2411e4a"],
Cell[153939, 3138, 3636, 79, 237, "Output", "ExpressionUUID" -> \
"5bdfa913-9369-453a-87d9-91e0fb0d005c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[157612, 3222, 700, 18, 45, "WolframAlphaLong", "ExpressionUUID" -> \
"68634137-bfb2-423e-848c-56e992ff7691"],
Cell[158315, 3242, 36284, 684, 407, "Print", "ExpressionUUID" -> \
"e07bccdc-54a6-445d-899c-26e0bc23d58c"]
}, Open  ]],
Cell[194614, 3929, 154, 3, 30, "Input", "ExpressionUUID" -> \
"24ab7457-2400-4d07-8cbe-3c5457c93e56"],
Cell[CellGroupData[{
Cell[194793, 3936, 906, 26, 47, "WolframAlphaLong", "ExpressionUUID" -> \
"267876c8-f2df-4c05-bf9a-3ae23877b2a2"],
Cell[195702, 3964, 112242, 2219, 2567, "Print", "ExpressionUUID" -> \
"27cdade0-a279-4b52-b84a-56364d8616e5"]
}, Open  ]],
Cell[307959, 6186, 152, 3, 30, "Input", "ExpressionUUID" -> \
"aea45ab2-d321-456e-8ff6-fb2ac066a27f"],
Cell[CellGroupData[{
Cell[308136, 6193, 232, 4, 42, "WolframAlphaLong", "ExpressionUUID" -> \
"ddecf7bf-59a9-41fd-bc7f-1d816295dd7c"],
Cell[308371, 6199, 106010, 2007, 727, "Print", "ExpressionUUID" -> \
"7d14c0b6-d047-405b-b7c6-8ea3b5c7269c"]
}, Open  ]]
}
]
*)

