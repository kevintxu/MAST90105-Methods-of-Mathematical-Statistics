(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    722732,      14510]
NotebookOptionsPosition[    717863,      14384]
NotebookOutlinePosition[    718207,      14399]
CellTagsIndexPosition[    718164,      14396]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[StyleBox["Question 1", "Subsection"]], "Subsubsection",
 CellChangeTimes->{{3.704270542400874*^9, 
  3.704270546935049*^9}},ExpressionUUID->"946a7dc8-71b2-4cd9-87aa-\
cd2db5e7f4eb"],

Cell[CellGroupData[{

Cell["a)", "Subsubsection",
 CellChangeTimes->{{3.704270564975275*^9, 
  3.704270566385437*^9}},ExpressionUUID->"7591c33c-664f-4f5c-9fd5-\
db6dd61ef6c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"\[Beta]", " ", "\[Tau]"}], ")"}], "x"], 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "\[Beta]"}], " ", "\[Tau]"}]]}], 
    RowBox[{"x", "!"}]], ")"}], 
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[Tau]", "y"], 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "\[Tau]"}]]}], 
    RowBox[{"y", "!"}]], ")"}]}]], "Input",
 CellChangeTimes->{{3.7042706120287156`*^9, 3.7042706941909876`*^9}, {
  3.7042727677111034`*^9, 
  3.7042728700626316`*^9}},ExpressionUUID->"0b45de1e-e3db-47b6-bad3-\
b85d7f1cf09e"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "\[Tau]"}], "-", 
     RowBox[{"\[Beta]", " ", "\[Tau]"}]}]], " ", 
   SuperscriptBox["\[Tau]", "y"], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"\[Beta]", " ", "\[Tau]"}], ")"}], "x"]}], 
  RowBox[{
   RowBox[{"x", "!"}], " ", 
   RowBox[{"y", "!"}]}]]], "Output",
 CellChangeTimes->{
  3.704270699420163*^9, {3.70427285780468*^9, 
   3.704272877120969*^9}},ExpressionUUID->"d5056969-1866-4822-a63c-\
237e205ede35"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["b)", "Subsubsection",
 CellChangeTimes->{{3.7043386241861963`*^9, 
  3.7043386248944745`*^9}},ExpressionUUID->"f9ffb2d8-c38b-4983-9b95-\
be6541a2a54c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"Ln", "[", 
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"b", " ", "t"}], ")"}], "x"], 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{
          RowBox[{"-", "b"}], " ", "t"}]]}], 
       RowBox[{"x", "!"}]], ")"}], 
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["t", "y"], 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", "t"}]]}], 
       RowBox[{"y", "!"}]], ")"}]}], "]"}], ",", " ", 
   RowBox[{"{", "b", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.704336111335082*^9, 3.704336111715457*^9}, {
  3.7043386290467777`*^9, 3.704338683767357*^9}, {3.7043387231028624`*^9, 
  3.704338745456402*^9}},ExpressionUUID->"22418e7b-4712-4843-94f1-\
32c597f89803"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", "t"}], "-", 
         RowBox[{"b", " ", "t"}]}]], " ", 
       SuperscriptBox["t", 
        RowBox[{"1", "+", "y"}]], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"b", " ", "t"}], ")"}], "x"]}], 
      RowBox[{
       RowBox[{"x", "!"}], " ", 
       RowBox[{"y", "!"}]}]]}], "+", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "t"}], "-", 
        RowBox[{"b", " ", "t"}]}]], " ", 
      SuperscriptBox["t", 
       RowBox[{"1", "+", "y"}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"b", " ", "t"}], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "x"}]], " ", "x"}], 
     RowBox[{
      RowBox[{"x", "!"}], " ", 
      RowBox[{"y", "!"}]}]]}], ")"}], " ", 
  RowBox[{
   SuperscriptBox["Ln", "\[Prime]",
    MultilineFunction->None], "[", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "t"}], "-", 
       RowBox[{"b", " ", "t"}]}]], " ", 
     SuperscriptBox["t", "y"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"b", " ", "t"}], ")"}], "x"]}], 
    RowBox[{
     RowBox[{"x", "!"}], " ", 
     RowBox[{"y", "!"}]}]], "]"}]}]], "Output",
 CellChangeTimes->{3.7043386687777596`*^9, 3.7043386992140045`*^9, 
  3.7043387467437696`*^9},ExpressionUUID->"577e9d83-a1cd-47f4-b25e-\
90cdefad6e48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "d / dx (",
 Cell[BoxData[
  RowBox[{"Ln", "[", 
   RowBox[{
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", " ", "t"}], ")"}], "a"], 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", "x"}], " ", "t"}]]}], 
      RowBox[{"a", "!"}]], ")"}], 
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["t", "y"], 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "t"}]]}], 
      RowBox[{"y", "!"}]], ")"}]}], "]"}]],
  CellChangeTimes->{{3.704336111335082*^9, 3.704336111715457*^9}, {
   3.7043386290467777`*^9, 3.704338683767357*^9}, {3.7043387231028624`*^9, 
   3.704338745456402*^9}},ExpressionUUID->
  "49b14b69-7554-4502-a123-2f3c3883931e"],
 ")"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.704338759229689*^9, 3.7043387872832036`*^9}, {
  3.7043389268487997`*^9, 
  3.704338942070097*^9}},ExpressionUUID->"7bc1d05f-c154-4515-ac87-\
7aa8ad4f6512"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "d / dx (Ln[(((x t)^a E^(-x t))/a!) ((t^y E^-t)/y!)])", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Log[((x t)^a/E^(x t)/a!) (t^y/E^t/y!)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"log", "(", 
               RowBox[{
                 TagBox[
                  FractionBox[
                   TagBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", " ", "t"}], ")"}], "a"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "x"}], " ", "t"}]]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                   RowBox[{"a", "!"}]], 
                  PolynomialForm[#, TraditionalOrder -> False]& ], 
                 StyleBox["\[Times]", 
                  GrayLevel[0.6]], 
                 TagBox[
                  FractionBox[
                   TagBox[
                    RowBox[{
                    SuperscriptBox["t", "y"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "t"}]]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                   RowBox[{"y", "!"}]], 
                  PolynomialForm[#, TraditionalOrder -> False]& ]}], ")"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"n", "!"}], "\" \"", "\"is the factorial function\""},
                "RowDefault"], TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}], 
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"log", "(", "x", ")"}], "\" \"", 
                "\"is the natural logarithm\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"log", "(", 
               FractionBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{"-", "x"}], ")"}]}], "-", "t"}]], " ", 
                  SuperscriptBox["t", "y"], " ", 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"t", " ", "x"}], ")"}], "a"]}], 
                RowBox[{
                  RowBox[{"a", "!"}], " ", 
                  RowBox[{"y", "!"}]}]], ")"}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[Log[(E^(-t - t x) t^y (t x)^a)/(a! y!)]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"log", "(", 
               FractionBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"-", "t"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}]}]], " ", 
                  SuperscriptBox["t", "y"], " ", 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"t", " ", "x"}], ")"}], "a"]}], 
                RowBox[{
                  RowBox[{"a", "!"}], " ", 
                  RowBox[{"y", "!"}]}]], ")"}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"log", "(", 
               FractionBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"x"}]}], "-", "1"}], ")"}]}]], " ", 
                  SuperscriptBox["t", "y"], " ", 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"t", " ", "x"}], ")"}], "a"]}], 
                RowBox[{
                  RowBox[{"a", "!"}], " ", 
                  RowBox[{"y", "!"}]}]], ")"}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FunctionExpand[Log[(E^(-t - t x) t^y (t x)^a)/(a! y!)]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"log", "(", 
               FractionBox[
                RowBox[{
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{"-", "x"}], ")"}]}], "-", "t"}]], " ", 
                  SuperscriptBox["t", "y"], " ", 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"t", " ", "x"}], ")"}], "a"]}], 
                RowBox[{
                  TemplateBox[{
                    RowBox[{"a", "+", "1"}]}, "Gamma"], " ", 
                  TemplateBox[{
                    RowBox[{"y", "+", "1"}]}, "Gamma"]}]], ")"}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/GammaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TemplateBox[{"x"}, "Gamma"], "\" \"", 
                "\"is the gamma function\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAt `1`x=0.", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[Log[(t^y (t x)^a)/(E^(t (1 + x)) a! y!)], {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "t"}]], " ", 
                    SuperscriptBox["t", "y"]}], 
                    RowBox[{
                    RowBox[{"a", "!"}], " ", 
                    RowBox[{"y", "!"}]}]], ")"}], "+", 
                    RowBox[{"a", " ", 
                    RowBox[{"log", "(", "t", ")"}]}], "+", 
                    RowBox[{"a", " ", 
                    RowBox[{"log", "(", "x", ")"}]}]}], ")"}], "-", 
                    RowBox[{"t", " ", "x"}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"a", " ", 
                    RowBox[{"Log", "[", "t", "]"}]}], "+", 
                    RowBox[{"a", " ", 
                    RowBox[{"Log", "[", "x", "]"}]}], "+", 
                    RowBox[{"Log", "[", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "t"}]], " ", 
                    SuperscriptBox["t", "y"]}], 
                    RowBox[{
                    RowBox[{"a", "!"}], " ", 
                    RowBox[{"y", "!"}]}]], "]"}]}], ",", 
                    RowBox[{"-", "t"}]}], "}"}], ",", "0", ",", "6", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Puiseux series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"D[Log[(E^(-t - t x) t^y (t x)^a)/(a! y!)], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FormBox[
               TagBox[
                FormBox[
                 RowBox[{
                   FormBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[PartialD]", "\"\""}], 
                    RowBox[{"\[PartialD]", "x"}], MultilineFunction -> None], 
                    HoldForm], TraditionalForm], "\[InvisibleApplication]", 
                   RowBox[{"(", 
                    TagBox[
                    TagBox[
                    RowBox[{"log", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", " ", "t"}], ")"}], "a"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "x"}], " ", "t"}]]}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["t", "y"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "t"}]]}], ")"}]}], 
                    RowBox[{
                    RowBox[{"a", "!"}], " ", 
                    RowBox[{"y", "!"}]}]], ")"}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
                 TraditionalForm], Format[#, TraditionalForm]& ], 
               TraditionalForm], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 FractionBox["a", "x"], "-", "t"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution"}, {}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {
        "Integrate[Log[((x t)^a/E^(x t)/a!) (t^y/E^t/y!)], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"log", "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", " ", "t"}], ")"}], "a"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "x"}], " ", "t"}]]}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["t", "y"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "t"}]]}], ")"}]}], 
                    RowBox[{
                    RowBox[{"a", "!"}], " ", 
                    RowBox[{"y", "!"}]}]], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox["1", "2"], " ", "x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "t"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", "1"}], ")"}]}]], " ", 
                    SuperscriptBox["t", "y"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"t", " ", "x"}], ")"}], "a"]}], 
                    RowBox[{
                    RowBox[{"a", "!"}], " ", 
                    RowBox[{"y", "!"}]}]], ")"}]}], "-", 
                    RowBox[{
                    RowBox[{"2"}], " ", "a"}], "+", 
                    RowBox[{"t", " ", "x"}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "(Ln[(((x t)^a E^(-x t))/a!) ((t^y E^-t)/y!)])", "score" -> "1.", 
        "level" -> "high"}, {}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
     "", "timedout" -> 
     "Simplification,Reduce,BranchPoint,ComplexMap,RiemannSurface,ODE,\
Sequence,DomainAndRange,GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "9.774000000000001", "parsetiming" -> 
     "1.195", "parsetimedout" -> "false", "recalculate" -> 
     "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa691i7cb46f7d9ebige00004aad7aa0403c0fbc2263311165813502583", "id" -> 
     "MSPa701i7cb46f7d9ebige0000525bd722gd0b483h", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "61", "related" -> "", 
     "version" -> "2.6"}, {
    "success" -> "true", "error" -> "false", "numpods" -> "0", "datatypes" -> 
     "", "timedout" -> 
     "Simplification,Arithmetic,Derivative,Geometry,Integral,Series,\
FunctionProperties,Reduce,BranchPoint,ComplexMap,RiemannSurface,ODE,Sequence,\
DomainAndRange,GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "5.152", "parsetiming" -> "0.", 
     "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "61", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 5, 21, 17, 2, 42.6509964`9.382504056085377}, "Line" -> 5,
     "SessionID" -> 18278502639549887684}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6}, Typeset`failedpods$$ = {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "d / dx (Ln[(((x t)^a E^(-x t))/a!) ((t^y E^-t)/y!)])"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
         Typeset`pod36$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{683., {401., 407.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
          Typeset`pod36$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa691i7cb46f7d9ebige00004aad7aa0403c0fbc2263311165813502583", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7043389627240105`*^9},ExpressionUUID->"b20799f6-18c3-4d34-81d8-\
e3f704444520"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"d", "/", 
   RowBox[{"db", "(", 
    RowBox[{"Ln", "[", 
     RowBox[{"a", "*", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["1", 
         RowBox[{"2", "*", 
          SuperscriptBox["b", "3"]}]], ")"}], "n"], "*", 
      RowBox[{"Exp", "[", 
       FractionBox[
        RowBox[{"-", "y"}], "b"], "]"}]}], "]"}], ")"}]}], 
  TraditionalForm]],ExpressionUUID->"f1fe6767-a737-480d-a7c7-b4511caf1643"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.704339204960278*^9, 
  3.704339226162897*^9}},ExpressionUUID->"4e2a4a17-f882-471b-b582-\
a0b4a3d1b4cb"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "d/db(Ln[a*(1/(2*b^3))^n*Exp[-y/b]])", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[Log[(a (b^(-3))^n)/(2^n E^(y/b))], b]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FormBox[
               TagBox[
                FormBox[
                 RowBox[{
                   FormBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[PartialD]", "\"\""}], 
                    RowBox[{"\[PartialD]", "b"}], MultilineFunction -> None], 
                    HoldForm], TraditionalForm], "\[InvisibleApplication]", 
                   RowBox[{"(", 
                    TagBox[
                    RowBox[{"log", "(", 
                    RowBox[{"a", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["b", "3"]}]], ")"}], "n"], " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{"-", 
                    FractionBox["y", "b"]}], ")"}]}], ")"}], HoldForm], 
                    ")"}]}], TraditionalForm], Format[#, TraditionalForm]& ], 
               TraditionalForm], "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{"y", "-", 
                  RowBox[{"3", " ", "b", " ", "n"}]}], 
                SuperscriptBox["b", "2"]], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"log", "(", "x", ")"}], "\" \"", 
                "\"is the natural logarithm\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Factor[(-3 b n + y)/b^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"-", 
               FractionBox[
                RowBox[{
                  RowBox[{"3", " ", "b", " ", "n"}], "-", "y"}], 
                SuperscriptBox["b", "2"]]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Expanded form", "scanner" -> "Simplification", "id" -> 
     "ExpandedForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Expand[(-3 b n + y)/b^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["y", 
                SuperscriptBox["b", "2"]], "-", 
               FractionBox[
                RowBox[{"3", " ", "n"}], "b"]}], Identity], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "LocusSolution", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[(-3 b n + y)/b^2 == 0, {b, n, y}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"y", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"3", " ", "b", " ", "n"}], Identity]}], 
                    RowBox[{"b", "\[NotEqual]", "0"}]}, "RowWithSeparators"], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Property as a function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertyAsAFunction", "position" -> "500",
      "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> "Parity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"odd\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[D[Log[a (1/(2 b^3))^n Exp[-y/b]], b], y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "b", " ", "n"}], "+", "y"}], 
                    SuperscriptBox["b", "2"]], 
                   RowBox[{"\[DifferentialD]", "y"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox[
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["y", "2"], "2"], "-", 
                    RowBox[{"3", " ", "b", " ", "n", " ", "y"}]}], 
                    SuperscriptBox["b", "2"]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
     "D", "timedout" -> "InterestingMultiDimensionalDefiniteIntegrals", 
     "timedoutpods" -> "", "timing" -> "3.323", "parsetiming" -> "0.987", 
     "parsetimedout" -> "false", "recalculate" -> 
     "http://www5b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa32241e04453844b537f500004ha872eac9ih6ihh4194928489543797930", "id" -> 
     "MSPa32251e04453844b537f500002fd2122e6h0gc2a3", "host" -> 
     "http://www5b.wolframalpha.com", "server" -> "56", "related" -> 
     "http://www5b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa32261e04453844b537f500002be0499f8ihiicg74194928489543797930", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "D", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", 
     "timing" -> "2.263", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5b.wolframalpha.com", "server" -> "64", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 5, 21, 17, 7, 14.1755833`8.904115889351425}, "Line" -> 6,
     "SessionID" -> 18278502639549887684}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6}, Typeset`failedpods$$ = {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "d/db(Ln[a*(1/(2*b^3))^n*Exp[-y/b]])"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
         Typeset`pod36$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{683., {270., 276.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
          Typeset`pod36$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www5b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa32241e04453844b537f500004ha872eac9ih6ihh4194928489543797930", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.704339234431134*^9},ExpressionUUID->"2dbba7d3-3750-43eb-8ad5-\
150ab971dc45"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Question 2", "Subsection",
 CellChangeTimes->{{3.704523221723618*^9, 
  3.704523225483343*^9}},ExpressionUUID->"e248a6fb-b8a5-472f-9869-\
797b0eb70af1"],

Cell[CellGroupData[{

Cell["a)", "Subsubsection",
 CellChangeTimes->{{3.704523237027216*^9, 
  3.704523237723836*^9}},ExpressionUUID->"24c5a1db-6ad7-4a33-b959-\
8848d6b24290"],

Cell[BoxData[
 RowBox[{"D", "[", "]"}]], "Input",
 CellChangeTimes->{{3.70452327969203*^9, 3.7045232921966457`*^9}, {
  3.704523374723503*^9, 
  3.7045233822812*^9}},ExpressionUUID->"65fd8a91-4c0c-4800-a104-9044b7f2317e"],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"d", "/", 
   RowBox[{"db", "(", 
    RowBox[{"Ln", "[", 
     RowBox[{"a", "*", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["1", 
         RowBox[{"2", "*", 
          SuperscriptBox["b", "3"]}]], ")"}], "n"], "*", 
      RowBox[{"Exp", "[", 
       FractionBox[
        RowBox[{"-", "y"}], "b"], "]"}]}], "]"}], ")"}]}], 
  TraditionalForm]],ExpressionUUID->"e8992d94-3d35-4d4c-a3ec-202b47864dff"]], \
"WolframAlphaLong",
 CellChangeTimes->{
  3.7045232568159046`*^9},ExpressionUUID->"1a939202-a13c-4664-9506-\
ae9a3a20d83e"],

Cell[BoxData[
 TemplateBox[{
  "URLFetch","invhttp",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Couldn't resolve host \
name\\\\\\\"\\\"}]\\).\"",2,1,1,18279750950408699222,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.7045232603865614`*^9},ExpressionUUID->"95ab43af-c2dc-45bf-82d7-\
ae03f6946bbb"],

Cell[BoxData["$Failed"], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7045232603965735`*^9},ExpressionUUID->"df715752-757b-479f-aade-\
a4a80bd3a552"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Question 4", "Subsection",
 CellChangeTimes->{{3.7050435292903957`*^9, 
  3.705043532969388*^9}},ExpressionUUID->"33d9a972-9faf-4f46-8e62-\
0744568bdc90"],

Cell[CellGroupData[{

Cell["c)", "Subsubsection",
 CellChangeTimes->{{3.705043547519842*^9, 
  3.705043548256985*^9}},ExpressionUUID->"36717ed6-e085-4d01-ac45-\
55bc4b997130"],

Cell[CellGroupData[{

Cell["d/dp (c*p^5*(1-p)^(x-5))", "WolframAlphaLong",
 CellChangeTimes->{{3.705043557368891*^9, 
  3.7050435860997915`*^9}},ExpressionUUID->"77f73135-4988-4a2f-b3b1-\
715b1ed243d1"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "d/dp (c*p^5*(1-p)^(x-5))", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[c (1 - p)^(-5 + x) p^5, p]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FormBox[
               TagBox[
                FormBox[
                 RowBox[{
                   FormBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[PartialD]", "\"\""}], 
                    RowBox[{"\[PartialD]", "p"}], MultilineFunction -> None], 
                    HoldForm], TraditionalForm], "\[InvisibleApplication]", 
                   RowBox[{"(", 
                    TagBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "5"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], 
                    RowBox[{"x", "-", "5"}]]}], HoldForm], ")"}]}], 
                 TraditionalForm], Format[#, TraditionalForm]& ], 
               TraditionalForm], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", "c"}], " ", 
                 SuperscriptBox["p", "4"], " ", 
                 SuperscriptBox[
                  RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], 
                  RowBox[{"x", "-", "6"}]], " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"p", " ", "x"}], "-", "5"}], ")"}]}], Identity]}],
             TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Factor[-(c (1 - p)^(-6 + x) p^4 (-5 + p x))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"-", 
               FractionBox[
                RowBox[{"c", " ", 
                  SuperscriptBox["p", "4"], " ", 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], "x"], " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"p", " ", "x"}], "-", "5"}], ")"}]}], 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{"p", "-", "1"}], ")"}], "6"]]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"c", " ", 
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{"1", "-", "p"}], ")"}], 
                RowBox[{"x", "-", "6"}]], " ", 
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"5", " ", 
                    SuperscriptBox["p", "4"]}], "-", 
                   RowBox[{
                    SuperscriptBox["p", "5"], " ", "x"}]}], ")"}]}], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Expanded form", "scanner" -> "Simplification", "id" -> 
     "ExpandedForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Expand[-(c (1 - p)^(-6 + x) p^4 (-5 + p x))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"5", " ", "c", " ", 
                 SuperscriptBox["p", "4"], " ", 
                 SuperscriptBox[
                  RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], 
                  RowBox[{"x", "-", "6"}]]}], "-", 
               RowBox[{"c", " ", 
                 SuperscriptBox["p", "5"], " ", "x", " ", 
                 SuperscriptBox[
                  RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], 
                  RowBox[{"x", "-", "6"}]]}]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> "LocusSolution",
      "position" -> "400", "error" -> "false", "numsubpods" -> "3", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Reduce[-(c (1 - p)^(-6 + x) p^4 (-5 + p x)) == 0, {c, p, x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"p", "\[LongEqual]", "1"}], 
                    RowBox[{
                    RowBox[{"Re", "(", "x", ")"}], ">", "6"}]}, 
                    "RowWithSeparators"], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Reduce[-(c (1 - p)^(-6 + x) p^4 (-5 + p x)) == 0, {c, p, x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{
                    RowBox[{"p", "-", "1"}], "\[NotEqual]", "0"}], 
                    RowBox[{"c", "\[LongEqual]", "0"}]}, "RowWithSeparators"],
                    BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Reduce[-(c (1 - p)^(-6 + x) p^4 (-5 + p x)) == 0, {c, p, x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"p", "\[NotEqual]", "0"}], 
                    RowBox[{
                    RowBox[{"p", "-", "1"}], "\[NotEqual]", "0"}], 
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    FractionBox["5", "p"], Identity]}]}, "RowWithSeparators"],
                    BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Re(z) is the real part of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Re.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Re", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/RealPart.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"Re", "(", "z", ")"}], "\" \"", 
                "\"is the real part of\"", "\" \"", "z"}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "Root", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Reduce[-(c (1 - p)^(-6 + x) p^4 (-5 + p x)) == 0, {c, p, x}, \
Reals]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"p", "\[LongEqual]", "0"}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x=0", "scanner" -> "Series", "id" -> 
     "SeriesExpansionAt `1`x=0.", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[-(c (1 - p)^(-6 + x) p^4 (-5 + p x)), {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"5", " ", "c", " ", 
                    SuperscriptBox["p", "4"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "6"]], "-", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", "x", " ", 
                    RowBox[{"(", 
                    RowBox[{"p", "-", 
                    RowBox[{"5", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}]}]}], ")"}]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "6"]], "+", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    SuperscriptBox["x", "2"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"5", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}]}], "-", 
                    RowBox[{"2", " ", "p"}]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "6"]}]], "+", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    SuperscriptBox["x", "3"], " ", 
                    RowBox[{
                    SuperscriptBox["log", "2"], "(", 
                    RowBox[{"1", "-", "p"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"5", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}]}], "-", 
                    RowBox[{"3", " ", "p"}]}], ")"}]}], 
                    RowBox[{"6", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "6"]}]], "+", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    SuperscriptBox["x", "4"], " ", 
                    RowBox[{
                    SuperscriptBox["log", "3"], "(", 
                    RowBox[{"1", "-", "p"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"5", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}]}], "-", 
                    RowBox[{"4", " ", "p"}]}], ")"}]}], 
                    RowBox[{"24", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "6"]}]], "+", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    SuperscriptBox["x", "5"], " ", 
                    RowBox[{
                    SuperscriptBox["log", "4"], "(", 
                    RowBox[{"1", "-", "p"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}], "-", "p"}], ")"}]}], 
                    RowBox[{"24", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "6"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "6"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"5", " ", "c", " ", 
                    SuperscriptBox["p", "4"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], "6"]], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{"p", "-", 
                    RowBox[{"5", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "p"}], "]"}]}]}], ")"}]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], "6"]]}], ",", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "p"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "p"}], "+", 
                    RowBox[{"5", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "p"}], "]"}]}]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], "6"]}]], ",", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    SuperscriptBox[
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "p"}], "]"}], "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "p"}], "+", 
                    RowBox[{"5", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "p"}], "]"}]}]}], ")"}]}], 
                    RowBox[{"6", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], "6"]}]], ",", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    SuperscriptBox[
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "p"}], "]"}], "3"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "4"}], " ", "p"}], "+", 
                    RowBox[{"5", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "p"}], "]"}]}]}], ")"}]}], 
                    RowBox[{"24", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], "6"]}]], ",", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    SuperscriptBox[
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "p"}], "]"}], "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "p"}], "+", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "p"}], "]"}]}], ")"}]}], 
                    RowBox[{"24", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], "6"]}]]}], "}"}], 
                    ",", "0", ",", "6", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"log", "(", "x", ")"}], "\" \"", 
                "\"is the natural logarithm\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x=\[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAt `1`x=Infinity", "position" -> "700",
      "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[-(c (1 - p)^(-6 + x) p^4 (-5 + p x)), {x, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SuperscriptBox[
               RowBox[{"(", 
                 RowBox[{"1", "-", "p"}], ")"}], "x"], " ", 
              RowBox[{"(", 
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "5"], " ", "x"}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "6"]]}], "+", 
                    FractionBox[
                    RowBox[{"5", " ", "c", " ", 
                    SuperscriptBox["p", "4"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "6"]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], "13"], ")"}], 
                    SeriesData[$CellContext`x, 
                    DirectedInfinity[1], {}, -1, 13, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "5"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], "6"]]}], ",", 
                    FractionBox[
                    RowBox[{"5", " ", "c", " ", 
                    SuperscriptBox["p", "4"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], "6"]]}], "}"}], 
                    ",", 
                    RowBox[{"-", "1"}], ",", "13", ",", "1"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[D[c p^5 (1 - p)^(x - 5), p], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"-", "c"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], 
                    RowBox[{
                    RowBox[{"-", "6"}], "+", "x"}]], " ", 
                    SuperscriptBox["p", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "5"}], "+", 
                    RowBox[{"p", " ", "x"}]}], ")"}]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"-", 
                    FractionBox[
                    RowBox[{"c", " ", 
                    SuperscriptBox["p", "4"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], 
                    RowBox[{"x", "-", "6"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"p", " ", "x"}], "-", "5"}], ")"}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}]}], "-", "p"}], ")"}]}], 
                    RowBox[{
                    SuperscriptBox["log", "2"], "(", 
                    RowBox[{"1", "-", "p"}], ")"}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
   Typeset`pod37$$, Typeset`pod38$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "8", "datatypes" -> 
     "D", "timedout" -> 
     "Reduce,GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "5.226", "parsetiming" -> "0.7020000000000001", "parsetimedout" -> 
     "false", "recalculate" -> 
     "http://www5b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa104120hih7b9e4ciied2000020hadb34g6557ihb6362405657181347004", "id" -> 
     "MSPa104220hih7b9e4ciied2000013b12i2579729164", "host" -> 
     "http://www5b.wolframalpha.com", "server" -> "61", "related" -> 
     "http://www5b.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa104320hih7b9e4ciied200005g9bd5b6767h72e26362405657181347004", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "D", "timedout" -> 
     "Reduce,GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "5.184", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5b.wolframalpha.com", "server" -> "64", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 5, 29, 20, 46, 33.7618587`9.281001247085333}, "Line" -> 
    1, "SessionID" -> 18283155027652749918}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6, 7, 8}, Typeset`failedpods$$ = {9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37, 38}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "d/dp (c*p^5*(1-p)^(x-5))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{676., {477., 483.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www5b.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa104120hih7b9e4ciied2000020hadb34g6557ihb6362405657181347004", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.705043594193929*^9},ExpressionUUID->"7a43875b-c9d7-46c1-b358-\
589a94c6e2e2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["d)", "Subsubsection",
 CellChangeTimes->{{3.7050480992547865`*^9, 
  3.7050481017126923`*^9}},ExpressionUUID->"4613fba1-692e-45d7-85c7-\
59d7df28fd8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Ln", "[", "c", "]"}], "+", 
    RowBox[{"5", 
     RowBox[{"Ln", "[", "p", "]"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "5"}], ")"}], 
     RowBox[{"Ln", "[", 
      RowBox[{"1", "-", "p"}], "]"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"p", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7050481530067205`*^9, 3.7050481616804204`*^9}, {
  3.7051023114964113`*^9, 
  3.705102346663703*^9}},ExpressionUUID->"004f3db4-0aeb-4a05-832d-\
535507058fb7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "5"}], "+", "x"}], ")"}], " ", 
   RowBox[{
    SuperscriptBox["Ln", "\[Prime]\[Prime]",
     MultilineFunction->None], "[", 
    RowBox[{"1", "-", "p"}], "]"}]}], "+", 
  RowBox[{"5", " ", 
   RowBox[{
    SuperscriptBox["Ln", "\[Prime]\[Prime]",
     MultilineFunction->None], "[", "p", "]"}]}]}]], "Output",
 CellChangeTimes->{
  3.705102348466833*^9},ExpressionUUID->"e300d663-cc30-47a7-9377-\
fd51e91fcb1f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["d/dp (Ln[c]+5Ln[p]+(x-5)Ln[1-p])", "WolframAlphaLong",
 CellChangeTimes->{{3.7051042651822567`*^9, 
  3.7051042786293354`*^9}},ExpressionUUID->"e0bd0cd8-e544-43f5-85c1-\
5badf4d5e05f"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "d/dp (Ln[c]+5Ln[p]+(x-5)Ln[1-p])", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Input__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"D[Log[c] + (-5 + x) Log[1 - p] + 5 Log[p], p]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FormBox[
               TagBox[
                FormBox[
                 RowBox[{
                   FormBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[PartialD]", "\"\""}], 
                    RowBox[{"\[PartialD]", "p"}], MultilineFunction -> None], 
                    HoldForm], TraditionalForm], "\[InvisibleApplication]", 
                   RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"log", "(", "c", ")"}], "+", 
                    RowBox[{"5", " ", 
                    RowBox[{"log", "(", "p", ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x", "-", "5"}], ")"}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}]}]}], HoldForm], ")"}]}], 
                 TraditionalForm], Format[#, TraditionalForm]& ], 
               TraditionalForm], "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{
                  RowBox[{"p", " ", "x"}], "-", "5"}], 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], " ", "p"}]], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{
                    "\"\[DifferentialD]\"", "\[InvisibleSpace]", "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "c", ")"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], ")"}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}]}], "+", 
                    RowBox[{"5", " ", 
                    RowBox[{"log", "(", "p", ")"}]}]}], ")"}]}]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Differentiate the sum term by term and factor out \
constants:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    FormBox[
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "c", ")"}], ")"}]}], TraditionalForm],
                     "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}], ")"}]}], HoldForm], 
                    ")"}]}], "+", 
                    RowBox[{"5", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "p", ")"}], ")"}]}], HoldForm], 
                    ")"}]}]}], TraditionalForm]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The derivative of \"", 
                    FormBox[
                    RowBox[{"log", "(", "c", ")"}], TraditionalForm], 
                    "\" is \"", 
                    FormBox["\"zero\"", TraditionalForm], "\":\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}], ")"}]}], TraditionalForm],
                     ")"}]}], "+", 
                    RowBox[{"5", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "p", ")"}], ")"}]}], HoldForm], 
                    ")"}]}], "+", 
                    TagBox[
                    GridBox[{{
                    TagBox["0", HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"]}]}, "RowDefault"]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Simplify the expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}], ")"}]}], HoldForm], 
                    ")"}]}], "+", 
                    RowBox[{"5", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "p", ")"}], ")"}]}], HoldForm], 
                    ")"}]}]}], HoldForm]}, "RowDefault"]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Using the chain rule, \"", 
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "p"}], ")"}], ")"}]}], "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"log", "(", "u", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "p"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    HoldForm], TraditionalForm]}], "\", where \"", 
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"1", "-", "p"}]}]}, "RowWithSeparators"], 
                    "\" and \"", 
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "u", ")"}], ")"}]}], "\[LongEqual]", 
                    FractionBox["1", "u"]}]}, "RowWithSeparators"], HoldForm],
                     "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{"5", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "p", ")"}], ")"}]}], HoldForm], 
                    ")"}]}], "+", 
                    TemplateBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], ")"}], "\" \"", 
                    TagBox[
                    GridBox[{{
                    FractionBox[
                    TagBox[
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}]}], TraditionalForm], 
                    HoldForm], 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    TagBox["p", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm]]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"]}, "RowDefault"]}]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Differentiate the sum term by term and factor out \
constants:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{"5", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "p", ")"}], ")"}]}], HoldForm], 
                    ")"}]}], "+", 
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "1", ")"}]}], TraditionalForm], HoldForm], 
                    "-", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "p", ")"}]}], HoldForm], HoldForm]}], 
                    HoldForm], TraditionalForm], DisplayForm]}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], "\" \"", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], 
                    RowBox[{"1", "-", "p"}]]}, "RowDefault"]}]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The derivative of \"", "1", "\" is \"", 
                    FormBox["\"zero\"", TraditionalForm], "\":\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{"5", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "p", ")"}], ")"}]}], HoldForm], 
                    ")"}]}], "+", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "p", ")"}]}], TraditionalForm], ")"}]}], "+", 
                    TagBox[
                    GridBox[{{
                    TagBox["0", HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"]}], ")"}]}], 
                    RowBox[{"1", "-", "p"}]]}]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Simplify the expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "p", ")"}]}], HoldForm], ")"}]}], 
                    RowBox[{"1", "-", "p"}]]}], "+", 
                    RowBox[{"5", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "p", ")"}], ")"}]}], HoldForm], 
                    ")"}]}]}], HoldForm]}, "RowDefault"]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The derivative of \"", 
                    FormBox["p", TraditionalForm], "\" is \"", "1", "\":\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{"5", " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "p"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "p"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"log", "(", "p", ")"}], ")"}]}], TraditionalForm],
                     ")"}]}], "-", 
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TagBox["1", HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], "\" \"", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], 
                    RowBox[{"1", "-", "p"}]]}, "RowDefault"]}]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The derivative of \"", 
                    FormBox[
                    RowBox[{"log", "(", "p", ")"}], TraditionalForm], 
                    "\" is \"", 
                    FormBox[
                    FractionBox["1", "p"], TraditionalForm], "\":\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], 
                    RowBox[{"1", "-", "p"}]]}], "+", 
                    TemplateBox[{"5", "\" \"", 
                    TagBox[
                    GridBox[{{
                    FractionBox[
                    TagBox["1", HoldForm], 
                    TagBox["p", HoldForm]]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"]}, "RowDefault"]}]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Simplify the expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Arial", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox["5", "p"], "-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], 
                    RowBox[{"1", "-", "p"}]]}], HoldForm]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Input__Hide steps"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                RowBox[{"log", "(", "x", ")"}], "\" \"", 
                "\"is the natural logarithm\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[(-5 + p x)/((-1 + p) p), {p, -2., 2.}, {x, -6., 6.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`density$$ = 15, 
                 CalculateUtilities`GraphicsUtilities`Private`max480$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max482$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min479$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min481$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min479$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max480$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min481$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max482$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$], 
                    True, "x"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$], 
                    True, "y"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$], 
                    False, "z"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$], 
                    15, "mesh density"}, 1, 30, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$496142$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min479$\
496147$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max480$496148$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min481$\
496149$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max482$496150$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`xmesh$496151$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`ymesh$496152$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`zmesh$\
496153$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`density$496154$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`density$$ = 
                    15, CalculateUtilities`GraphicsUtilities`Private`max480$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max482$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min479$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min481$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = 
                    True, CalculateUtilities`GraphicsUtilities`Private`ymesh$$\
 = True, CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$496142$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min479$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min479$\
496147$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max480$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`max480$\
496148$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min481$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min481$\
496149$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max482$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max482$\
496150$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$496151$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$496152$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$496153$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    CalculateUtilities`GraphicsUtilities`Private`density$\
496154$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    
                    Plot3D[#, #2, #3, Mesh -> 
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    MeshFunctions :> Flatten[{
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, #& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, #2& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, #3& \
, {}]}], 
                    SlotSequence[4]], 
                    HoldAll][((-1 + $CellContext`p)^(-1)/$CellContext`p) (-5 + \
$CellContext`p $CellContext`x), {$CellContext`p, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min479$$], 
                    (Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min479$$], \
-2.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min479$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max480$$]], 
                    (
                    Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min479$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max480$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min479$$ + 
                    0.004, CalculateUtilities`GraphicsUtilities`Private`\
max480$$]], 2.]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min481$$], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min481$$], \
-6.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min481$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max482$$]], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min481$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max482$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min481$$ + 
                    0.012, CalculateUtilities`GraphicsUtilities`Private`\
max482$$]], 6.]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, BoxRatios -> Automatic, 
                    ImageSize -> 240., PlotRange -> Automatic, ClippingStyle -> 
                    Opacity[0.25], AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, MeshStyle -> 
                    Opacity[0.45], Mesh -> 20, ColorFunction :> (Blend[{
                    RGBColor[0.628962, 0.149248, 0.135592], 
                    RGBColor[1., 0.634379, 0.186801], 
                    RGBColor[1., 0.895537, 0.582162], 
                    RGBColor[1., 0.995346, 0.826535]}, #3]& ), AxesStyle :> 
                    Directive[
                    GrayLevel[0.65], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BoxStyle :> GrayLevel[0, 0.35]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min479$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max480$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min481$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max482$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, {{
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    True, "x"}, {True, False}, ControlPlacement -> 5}, {{
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    True, "y"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    False, "z"}, {True, False}, ControlPlacement -> 7}, {{
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    15, "mesh density"}, 1, 30, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 8}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMNBjSkJAQ29iYNKAk5XtvsZNauHawnb3w58FnN0mzdpViOkBT+uFUX5rHd889d71nRzJK+\
71eT1+35qPkJL2Fp6fW7MhpLgtBPpzmimrNpEiv4bO71sTU7FIOZ5R4301r9qSagvHnt/g+\
8KTgYOg3wzgzjOrxvoJ8whJde4aKHdufjLlMgLOf9Pnmm9dbWxseBUMZgjFUCf2qLWI+\
UaBp2kOgG9ZscxDf/\
fFJefxccB7THwUVCdWPrHekgFgYKYBjOsG3Xmmi7mNeBgQBRS6dJSfO7bYXaKOYyEZ0muMbF3K10RY\
XVKY9NQ9Kalbpx0d/Gx/I2IXkPS5nd3b8hYVxtdg7L6p/Tt0Az+/\
awit5spQ3TO89R9rAsGOqF9l80bpKnpCqZV3wM6ouabasNcaLJ0z9j3TItFkM42XbMOj0yFZ4ufIW4\
TfbwsscW34m7YfWfPGOEnDZZKjk9kmSgs+\
iaKY88AJtn67OrcNj3Kv4jtEZUsEKJ7Jxlt3iuuNxBV7vCDHWbrwG6Yh6AkQ0p9ZFHLe7LGNmZwIKE\
gs8u65f9thI1qEE3Nm+\
9kwQZseXJ2TV2oTmIJ2rO5hk8vWPilvJ5VyTIe8HwtCMqpWiv4P1UZZcQUYyMJIYL2jqNZjDKqkhqG\
DZD0qQOAfBEJL9sh/3zT+crwRSta9QXcqzOHClOQ1Pol8W+\
JCKzEya23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2xP+\
4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3A+a3Lg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[(-5 + p x)/((-1 + p) p), {p, -2., 2.}, {x, -6., 6.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max79$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max81$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min78$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min80$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min78$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max79$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min80$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max81$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$389405$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min78$\
389410$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max79$389411$$ = 0,
                  CalculateUtilities`GraphicsUtilities`Private`min80$389412$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`max81$389413$\
$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max79$$ = 0.5,
                     CalculateUtilities`GraphicsUtilities`Private`max81$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min78$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min80$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$389405$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min78$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min78$389410$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max79$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max79$389411$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min80$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min80$389412$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max81$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max81$389413$\
$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    ContourPlot[((-1 + $CellContext`p)^(-1)/$CellContext`p) \
(-5 + $CellContext`p $CellContext`x), {$CellContext`p, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min78$$], 
                    (
                    Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min78$$], \
-2.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min78$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max79$$]], 
                    (
                    Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min78$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max79$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min78$$ + 
                    0.004, CalculateUtilities`GraphicsUtilities`Private`max79$\
$]], 2.]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min80$$], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min80$$], \
-6.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min80$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max81$$]], 
                    (Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min80$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max81$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min80$$ + 
                    0.012, CalculateUtilities`GraphicsUtilities`Private`max81$\
$]], 6.]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 240., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min78$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max79$$, 0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min80$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max81$$, 0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMNDYkkJAQ29iYNKAk5XtvsZNauHawnb3w58FnN0mzdpViOkBT+uFUX5rHd889d71nRzJK+\
71eT1+35qPkJL2Fp6fW7MhpLgtBPpzmimrNpEiv4bO71sTU7FIOZ5R4301r9qSagvHnt/g+\
8KTgYOg3wzgzjOrxvoJ8whJde4aKHdufjLlMgLOf9Pnm6zcbW688CoYyBGOoEnqzLWI+\
UaBp2kOgG9ZscxDf/\
fFJefxccB7THwUVCdWPrHekgFgYKYBjOsG3Xmmi7mNeBgQBRS6dJSfO7bYXaKOYyEZ0muMbF3K10RY\
XVKY9NQ9Kalbpx0d/Gx/I2IXkPS5nd3b8hYVxtdg7L6p/Tt0Az+/\
awit5spQ3TO89R9rAsGOqF9l80bpKnpCqZV3wM6ouabasNcaLJ0z9j3TItFkM42XbMOj0yFZ4ufIW4\
bfawsscW34m7YfWfPGOEnDZZKjk9kmSgs+\
iaKY88AJtn67OrcNj3Kv4jtEZUsEKJ7Jxlt3iuuNxBV7vCDHWbrwG6Yh6AkQ0p9ZFHLe7LGNmZwIKE\
gs8u65f9thI1qEE3Nm+\
9kwQZseXJ2TV2oTmIJ2rO5hk8vWPilvJ5VyTIe8HwtCMqpWiv4P1UZZcQUYyMJIYL2jqNZjDKqkhqG\
DZD0qQOAfBEJL9sh/3zT+crwRSta9QXcqzOHClOQ1Pol8W+\
JCKzEya23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2xP+\
4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3ov63Bg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Expanded forms", "scanner" -> "Simplification", "id" -> 
     "ExpandedForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{
                RowBox[{"p", " ", "x"}], "-", "5"}], 
              RowBox[{
                SuperscriptBox["p", "2"], "-", "p"}]], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Expand[(-5 + p x)/((-1 + p) p)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["x", 
                RowBox[{"p", "-", "1"}]], "-", 
               FractionBox["5", 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], " ", "p"}]]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "LocusSolution", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Reduce[(-5 + p x)/((-1 + p) p) == 0, {p, x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"p", "\[NotEqual]", "0"}], 
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    FractionBox["5", "p"], Identity]}], 
                    RowBox[{
                    RowBox[{"p", "-", "1"}], "\[NotEqual]", "0"}]}, 
                    "RowWithSeparators"], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Integer roots", "scanner" -> "Reduce", "id" -> 
     "IntegerSolution", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "3", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Reduce[(-5 + p x)/((-1 + p) p) == 0, {p, x}, Integers]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"p", "\[LongEqual]", 
                    RowBox[{"-", "5"}]}], 
                    RowBox[{"x", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}]}, "RowWithSeparators"], 
                  BaselinePosition -> Baseline, ImageSize -> 550]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Reduce[(-5 + p x)/((-1 + p) p) == 0, {p, x}, Integers]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"p", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], 
                    RowBox[{"x", "\[LongEqual]", 
                    RowBox[{"-", "5"}]}]}, "RowWithSeparators"], 
                  BaselinePosition -> Baseline, ImageSize -> 550]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Reduce[(-5 + p x)/((-1 + p) p) == 0, {p, x}, Integers]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"p", "\[LongEqual]", "5"}], 
                    RowBox[{"x", "\[LongEqual]", "1"}]}, "RowWithSeparators"],
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Property as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertyAsARealFunction", "position" -> 
     "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "\[DoubleStruckCapitalR] is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[D[Log[c] + 5 Log[p] + (x - 5) Log[1 - p], p], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{"-", "5"}], "+", 
                    RowBox[{"p", " ", "x"}]}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], " ", "p"}]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"p", " ", 
                    SuperscriptBox["x", "2"]}], "2"], "-", 
                    RowBox[{"5", " ", "x"}]}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], " ", "p"}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
   Typeset`pod37$$, Typeset`pod38$$, Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "8", "datatypes" -> 
     "D", "timedout" -> "InterestingMultiDimensionalDefiniteIntegrals", 
     "timedoutpods" -> "", "timing" -> "3.992", "parsetiming" -> "0.809", 
     "parsetimedout" -> "false", "recalculate" -> 
     "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa126221754b67c6f252ab0000624gb5ch440465073437762207798455635", "id" -> 
     "MSPa126321754b67c6f252ab00004haa9aadc4bf3e1f", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "54", "related" -> 
     "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa126421754b67c6f252ab000010153id48e2ge2473437762207798455635", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "D", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", 
     "timing" -> "2.706", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "24", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 5, 30, 13, 38, 7.0333898`8.59973965733674}, "Line" -> 1, 
    "SessionID" -> 18283558728873100173}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7, 8}, Typeset`failedpods$$ = {9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "d/dp (Ln[c]+5Ln[p]+(x-5)Ln[1-p])"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{676., {2355., 2361.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa126221754b67c6f252ab0000624gb5ch440465073437762207798455635", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7051042874076023`*^9},ExpressionUUID->"44d7e226-00ac-409d-898d-\
243e30109751"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "d/dp (",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["5", "p"], "-", 
    FractionBox[
     RowBox[{
      RowBox[{"-", "5"}], "+", "x"}], 
     RowBox[{"1", "-", "p"}]]}], TraditionalForm]], "WolframAlphaFullOutput",
  CellChangeTimes->{3.7051042874076023`*^9},ExpressionUUID->
  "59cb230b-1410-4376-986b-5409398815ce"],
 ")"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.7051047046441107`*^9, 
  3.705104708215674*^9}},ExpressionUUID->"a0c8bec5-f358-4a57-8642-\
e6cb562f66f7"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "d/dp (5/p - (-5 + x)/(1 - p))", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[5/p - (-5 + x)/(1 - p), p]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FormBox[
               TagBox[
                FormBox[
                 RowBox[{
                   FormBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[PartialD]", "\"\""}], 
                    RowBox[{"\[PartialD]", "p"}], MultilineFunction -> None], 
                    HoldForm], TraditionalForm], "\[InvisibleApplication]", 
                   RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    FractionBox["5", "p"], "-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", "5"}], "+", "x"}], 
                    RowBox[{"1", "-", "p"}]]}], HoldForm], ")"}]}], 
                 TraditionalForm], Format[#, TraditionalForm]& ], 
               TraditionalForm], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 FractionBox[
                  RowBox[{"5", "-", "x"}], 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], "2"]], "-", 
                 FractionBox["5", 
                  SuperscriptBox["p", "2"]]}], Identity]}], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[-5/p^2 + (5 - x)/(-1 + p)^2, {p, -2., 2.}, {x, -6., 6.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`density$$ = 15, 
                 CalculateUtilities`GraphicsUtilities`Private`max430$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max432$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min429$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min431$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max430$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min431$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max432$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$], 
                    True, "x"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$], 
                    True, "y"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$], 
                    False, "z"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$], 
                    15, "mesh density"}, 1, 30, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$329890$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min429$\
329895$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max430$329896$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min431$\
329897$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max432$329898$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`xmesh$329899$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`ymesh$329900$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`zmesh$\
329901$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`density$329902$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`density$$ = 
                    15, CalculateUtilities`GraphicsUtilities`Private`max430$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max432$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min429$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min431$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = 
                    True, CalculateUtilities`GraphicsUtilities`Private`ymesh$$\
 = True, CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$329890$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min429$\
329895$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max430$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max430$\
329896$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min431$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min431$\
329897$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max432$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max432$\
329898$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$329899$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$329900$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$329901$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    CalculateUtilities`GraphicsUtilities`Private`density$\
329902$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    Plot3D[#, #2, #3, Mesh -> 
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    MeshFunctions :> Flatten[{
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, #& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, #2& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, #3& \
, {}]}], 
                    SlotSequence[4]], 
                    HoldAll][(-5) $CellContext`p^(-2) + (-1 + \
$CellContext`p)^(-2) (5 - $CellContext`x), {$CellContext`p, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$], 
                    (
                    Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$], \
-2.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max430$$]], 
                    (
                    Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min429$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max430$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min429$$ + 
                    0.004, CalculateUtilities`GraphicsUtilities`Private`\
max430$$]], 2.]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min431$$], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min431$$], \
-6.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min431$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max432$$]], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min431$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max432$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min431$$ + 
                    0.012, CalculateUtilities`GraphicsUtilities`Private`\
max432$$]], 6.]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, BoxRatios -> Automatic, 
                    ImageSize -> 240., PlotRange -> Automatic, ClippingStyle -> 
                    Opacity[0.25], AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, MeshStyle -> 
                    Opacity[0.45], Mesh -> 20, ColorFunction :> (Blend[{
                    RGBColor[0.628962, 0.149248, 0.135592], 
                    RGBColor[1., 0.634379, 0.186801], 
                    RGBColor[1., 0.895537, 0.582162], 
                    RGBColor[1., 0.995346, 0.826535]}, #3]& ), AxesStyle :> 
                    Directive[
                    GrayLevel[0.65], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BoxStyle :> GrayLevel[0, 0.35]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min429$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max430$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min431$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max432$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, {{
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    True, "x"}, {True, False}, ControlPlacement -> 5}, {{
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    True, "y"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    False, "z"}, {True, False}, ControlPlacement -> 7}, {{
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    15, "mesh density"}, 1, 30, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 8}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMRIeQJiEhtsGYNKAk5Xu9+\
JJauHZmO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPjmSU9nu9nr5uzUfJaXoLT0+t2ZWzXBaCvj/\
LFWjNpEiv4bO71sRg9oCTH0C976Y1H6SaEePPb/B9wpOCEwPfDOPMMNCTfUXyKUt07RkpdmJ/\
MuEyIZz9hOdbw+3Xw22PgqGMiDGghN5qi5hPFdGQ9hDohjU7nIjv/vikPH4uOI/\
huACRgH5kvWNFqIWRgnBMJ/\
jWK03UfczLEEGJopfOkhPnTtsLtFFMZGOY5fjGhVy9bItLVKY9NQ9Katbpx0d/Gx/\
I2IXkPS5nd3b8hYVxtdg7L6p/Tt0Az2/\
bwit5upI3TO8dR9qIYSegl9l80bpKnpCqZV3wc6ouabZsNMaLJ0z9j3TItFkOY9g2DJgd2QqvVt4y/\
Ku28DLHlp9L+6E1X7yjBFw1GSq5fZK04PMomikPvEDbp6tz6/AY9yq+\
Y3SGVLDCiWycZbe47nhcgdc7Qoy1m2xAOqKeABHkYF3UcbvHMmZ2p0SRxALPr+\
uXPTaWdSgBd7avPROU2fHlCVm3NqE5SBfqTkwy/fpHxa3kcq7JkPcDYSADtVb0d7A+\
ypIr6FgGRhLjBU29BnNYJTUiKlj2gxIkzolgCMl+2Y/\
75h8uVgKp2leoLuVZHLjSnIUn0S8LfAgiM9Pmdh04uoLbFrOJ5Gmtuoil6eK02RzT/\
SbTjRuaAz2UhNCShA/0bk/o9oS/uCcs7cDdktAtCd2S0C0J3ZLw/y4JLmL8V/oNHDS3Dg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[-5/p^2 + (5 - x)/(-1 + p)^2, {p, -2., 2.}, {x, -6., \
6.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2647$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max2649$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min2646$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min2648$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2646$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2647$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2648$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2649$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1586249$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2646$\
1586254$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2647$1586255$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min2648$\
1586256$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2649$1586257$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2647$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max2649$\
$ = 0.5, CalculateUtilities`GraphicsUtilities`Private`min2646$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min2648$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`more$1586249$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2646$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2646$\
1586254$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2647$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2647$\
1586255$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2648$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2648$\
1586256$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2649$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2649$\
1586257$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    ContourPlot[(-5) $CellContext`p^(-2) + (-1 + \
$CellContext`p)^(-2) (5 - $CellContext`x), {$CellContext`p, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2646$$], 
                    (
                    Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2646$$], \
-2.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2646$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2647$$]], 
                    (
                    Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2646$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2647$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2646$$ + 
                    0.004, CalculateUtilities`GraphicsUtilities`Private`\
max2647$$]], 2.]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2648$$], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2648$$], \
-6.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2648$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2649$$]], 
                    (
                    Piecewise[{{
                    0. + 6.414269805898185 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.414269805898185 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2648$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2649$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2648$$ + 
                    0.012, CalculateUtilities`GraphicsUtilities`Private`\
max2649$$]], 6.]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 240., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2646$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2647$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["p", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2648$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2649$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMNGDS9gEJ6GBMGlCS8r232GksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96TIxml/\
V6vp69a80Fykt7A02NrhnKWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnV/g+\
8KTgYOhXwzgzjOrJvoI8Y4muPSPFju1PJlwmwNlP+\
nRre2d7d2fXw2AsIzCGKqFftIXMMwWapj0EumbNWw7imz8+Ko+fCs5j+\
r2gIqH6gfWOFRALIwVwzCf41svN1F1MzIAgoMiF0+\
TkOWx7gTaKiemYznJ843yyttoCg5pqz829kpt1CvLh38QHMnYxeY9L2p0dgWFhXDL6zsrqn3M3wPPr\
tvBKnqwmDvN7w5E3MOyY6mU6n7Wuk2ek6loX/Zyri5ovGw3y/ClT/\
y8dMm2Ww3jeNgw6O7I1Xq29ZfiXbeFljl0/F/\
d9az57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMe5UfMfoDKlghRPZOMt+\
cf3xsAKvN4UYazfZgHREPQMimlPrIo7bPTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyhOUgX6g4myb78UXEruZxpMuT9QBg6pWqt6G9hfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0rVJfyLA5caU7Dk+\
iXBT6kYmqy5o4dOLqC2xazieRJrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DXW7uQY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FullSimplify[-5/p^2 + (5 - x)/(1 - p)^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox[
                RowBox[{"5", "-", "x"}], 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{"p", "-", "1"}], ")"}], "2"]], "-", 
               FractionBox["5", 
                SuperscriptBox["p", "2"]]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Factor[-5/p^2 + (5 - x)/(1 - p)^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"-", 
               FractionBox[
                RowBox[{
                  RowBox[{
                    SuperscriptBox["p", "2"], " ", "x"}], "-", 
                  RowBox[{"10", " ", "p"}], "+", "5"}], 
                RowBox[{
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "2"], " ", 
                  SuperscriptBox["p", "2"]}]]}], Identity], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Apart[-5/p^2 + (5 - x)/(1 - p)^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox[
                RowBox[{"5", " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "p"}], "-", "1"}], ")"}]}], 
                RowBox[{
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "2"], " ", 
                  SuperscriptBox["p", "2"]}]], "-", 
               FractionBox["x", 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{"p", "-", "1"}], ")"}], "2"]]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Expanded form", "scanner" -> "Simplification", "id" -> 
     "ExpandedForm", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Expand[-5/p^2 + (5 - x)/(1 - p)^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 FractionBox["5", 
                  SuperscriptBox["p", "2"]]}], "-", 
               RowBox[{
                 FractionBox["x", 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], "2"]]}], "+", 
               FractionBox["5", 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{"1", "-", "p"}], ")"}], "2"]]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "LocusSolution", 
     "position" -> "600", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Reduce[-5/p^2 + (5 - x)/(-1 + p)^2 == 0, {p, x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"p", "\[NotEqual]", "0"}], 
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    FractionBox[
                    RowBox[{"5", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "p"}], "-", "1"}], ")"}]}], 
                    SuperscriptBox["p", "2"]], Identity]}], 
                    RowBox[{
                    RowBox[{"p", "-", "1"}], "\[NotEqual]", "0"}]}, 
                    "RowWithSeparators"], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Integer root", "scanner" -> "Reduce", "id" -> 
     "IntegerSolution", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Reduce[-5/p^2 + (5 - x)/(-1 + p)^2 == 0, {p, x}, Integers]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  TemplateBox[{",   ", "\",   \"", 
                    RowBox[{"p", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], 
                    RowBox[{"x", "\[LongEqual]", 
                    RowBox[{"-", "15"}]}]}, "RowWithSeparators"], 
                  BaselinePosition -> Baseline, ImageSize -> 550]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, 
               AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Property as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertyAsARealFunction", "position" -> 
     "800", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TagBox["\[DoubleStruckCapitalR]", 
                Function[{}, Reals]], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
             LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "\[DoubleStruckCapitalR] is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}], 
         XMLElement["cell", {"compressed" -> False, "string" -> True}, {
           Cell[
            BoxData[
             FormBox[
              TemplateBox[{
                TagBox["\[DoubleStruckCapitalR]", 
                 Function[{}, Reals]], "\" \"", 
                "\"is the set of real numbers\""}, "RowDefault"], 
              TraditionalForm]], "Output", {
            Background -> None, 
             GraphicsBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", 
                 "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1, 
                   "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
                 Directive[
                  FontFamily -> "Times", FontSize -> 10, 
                   "GraphicsFrameTicks"]}}, 
             Graphics3DBoxOptions -> {
              DefaultBaseStyle -> {
                FontFamily -> "Times", "Graphics3D"}}}]}]}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[D[5/p - (-5 + x)/(1 - p), p], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["5", 
                    SuperscriptBox["p", "2"]]}], "+", 
                    FractionBox[
                    RowBox[{"5", "-", "x"}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], "2"]]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"5", " ", "x"}], 
                    SuperscriptBox["p", "2"]]}], "-", 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["x", "2"], 
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "2"]}]]}], "+", 
                    FractionBox[
                    RowBox[{"5", " ", "x"}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], "2"]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, 
   Typeset`pod38$$, Typeset`pod39$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "9", "datatypes" -> 
     "D", "timedout" -> "InterestingMultiDimensionalDefiniteIntegrals", 
     "timedoutpods" -> "", "timing" -> "3.895", "parsetiming" -> "0.635", 
     "parsetimedout" -> "false", "recalculate" -> 
     "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa1292069cf7ch9c635ai000052a469a5428g47ag2806593055404222290", "id" -> 
     "MSPa1302069cf7ch9c635ai00002cba24acg7fi90f5", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "48", "related" -> 
     "http://www5a.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1312069cf7ch9c635ai00001bc219i8a4i88d6e2806593055404222290", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "D", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", 
     "timing" -> "3.019", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www5a.wolframalpha.com", "server" -> "63", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 5, 30, 13, 45, 30.6752004`9.239362315972873}, "Line" -> 
    3, "SessionID" -> 18283558728873100173}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6, 7, 8, 9}, Typeset`failedpods$$ = {10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37, 38, 39}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "d/dp (5/p - (-5 + x)/(1 - p))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{676., {2057., 2063.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$}, 
         Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "http://www5a.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa1292069cf7ch9c635ai000052a469a5428g47ag2806593055404222290", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.705104730744239*^9},ExpressionUUID->"62b9c113-1e47-47d1-92fa-\
4aa0d553d5ca"],

Cell[BoxData[
 TemplateBox[{
  "URLFetch","invhttp",
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Couldn't resolve host \
name\\\\\\\"\\\"}]\\).\"",2,5,5,18284141849260692275,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.7051933350722003`*^9},ExpressionUUID->"76c54789-679a-4d9d-9e47-\
6d2bccdf9342"],

Cell[BoxData[
 TemplateBox[{
  "WolframAlpha","nopst",
   "\"The \\!\\(\\*RowBox[{\\\"\\\\\\\"IndefiniteIntegral\\\\\\\"\\\"}]\\) \
pod is not reporting any additional information for the \\!\\(\\*RowBox[{\\\"\
\\\\\\\"IndefiniteIntegral__Step-by-step solution\\\\\\\"\\\"}]\\) pod state.\
\"",2,5,6,18284141849260692275,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.705193335480275*^9},ExpressionUUID->"cea7f962-9959-438b-8cc3-\
9ba71c71b9f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "simplify ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["5", 
     SuperscriptBox["p", "2"]], "+", 
    FractionBox[
     RowBox[{
      FractionBox["5", "p"], "-", "5"}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", "p"}], ")"}], "2"]]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "6dbbaeca-7dd4-4c3b-9ef9-2973a686bb23"]
}], "WolframAlphaLong",
 CellChangeTimes->{{3.705193243493533*^9, 
  3.7051932938411055`*^9}},ExpressionUUID->"8a08f7d8-1a7d-48a8-b216-\
445b32bba38b"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "simplify 5/p^2 + (5/p - 5)/(1 - p)^2", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"simplify\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    FractionBox["5", 
                    SuperscriptBox["p", "2"]], "+", 
                    FractionBox[
                    RowBox[{
                    FractionBox["5", "p"], "-", "5"}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "p"}], ")"}], "2"]]}], ScriptLevel -> 0,
                     StripOnInput -> False]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Simplification", "id" -> 
     "Result", "position" -> "100", "error" -> "false", "numsubpods" -> "4", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"5/p^2 + (5/p - 5)/(1 - p)^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"-", 
              FractionBox["5", 
               RowBox[{
                 RowBox[{"(", 
                   RowBox[{"p", "-", "1"}], ")"}], " ", 
                 SuperscriptBox["p", "2"]}]]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"-", 
               FractionBox["5", 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"p", "-", "1"}], ")"}], " ", 
                  SuperscriptBox["p", "2"]}]]}], Identity], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Apart[(-5 + 5/p)/(1 - p)^2 + 5/p^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["5", 
                SuperscriptBox["p", "2"]], "+", 
               FractionBox["5", "p"], "-", 
               FractionBox["5", 
                RowBox[{"p", "-", "1"}]]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Simplify the following\""}, "RowDefault"],
                     "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    TagBox["p", HoldForm]], "-", "5"}], HoldForm], 
                    TraditionalForm], DisplayForm]}], 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    TagBox["p", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Put each term in \"", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    TagBox["p", HoldForm]], "-", "5"}], HoldForm], 
                    TraditionalForm], DisplayForm], 
                    "\" over the common denominator \"", "p", "\": \"", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    TagBox["p", HoldForm]], "-", "5"}], HoldForm], 
                    TraditionalForm], DisplayForm], "\" \[LongEqual] \"", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    TagBox["p", HoldForm]], "-", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}], HoldForm], 
                    TagBox["p", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    TagBox["p", HoldForm]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}], 
                    TagBox["p", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}], 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    TagBox["p", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    TagBox["p", HoldForm]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}], 
                    TagBox["p", HoldForm]]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", 
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"5", "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], 
                    TagBox["p", HoldForm]]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]], "+", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"5", "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], 
                    TagBox["p", HoldForm]], HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}], 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    TagBox["p", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"A common factor of \"", 
                    TagBox[
                    RowBox[{"5", "-", 
                    RowBox[{"5", " ", "p"}]}], HoldForm], "\" and \"", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"1", "-", "p"}], HoldForm], ")"}], "2"], 
                    "\" is \"", 
                    TagBox[
                    RowBox[{"p", "-", "1"}], HoldForm], "\", so \"", 
                    RowBox[{
                    FractionBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"5", "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], 
                    RowBox[{
                    TagBox["p", HoldForm], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{"1", "-", 
                    TagBox["p", HoldForm]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], 
                    TagBox["2", HoldForm]]}]], "\[LongEqual]", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "5"}], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], 
                    RowBox[{
                    TagBox["p", HoldForm], " ", 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}]]}]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]], "+", 
                    FractionBox[
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "5"}], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm], 
                    RowBox[{
                    TagBox["p", HoldForm], " ", 
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}]]}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "5"}], HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], 
                    RowBox[{
                    TagBox["p", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]], "\[LongEqual]", 
                    TemplateBox[{
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm], 
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm]], 
                    StyleBox[
                    "\"\[Times]\"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    FractionBox[
                    TagBox[
                    RowBox[{"-", "5"}], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], HoldForm]]}, 
                    "RowDefault"], "\[LongEqual]", 
                    FractionBox[
                    TagBox[
                    RowBox[{"-", "5"}], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], HoldForm]]}]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]], "+", 
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    FractionBox[
                    TagBox[
                    RowBox[{"-", "5"}], HoldForm], 
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], HoldForm]], 
                    HoldForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm]}], HoldForm], TraditionalForm],
                     DisplayForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Put each term in \"", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]], "-", 
                    FractionBox[
                    TagBox[
                    RowBox[{"5"}], HoldForm], 
                    RowBox[{
                    TagBox["p", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]]}], HoldForm], 
                    TraditionalForm], DisplayForm], 
                    "\" over the common denominator \"", 
                    RowBox[{
                    SuperscriptBox["p", "2"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"p", "-", "1"}], HoldForm], ")"}]}], "\": \"", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox["5", HoldForm], 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]], "-", 
                    FractionBox[
                    TagBox[
                    RowBox[{"5"}], HoldForm], 
                    RowBox[{
                    TagBox["p", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]]}], HoldForm], 
                    TraditionalForm], DisplayForm], "\" \[LongEqual] \"", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox[
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], " ", 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]}]], "-", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], " ", 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}], 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]]}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], " ", 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]}]], "-", 
                    FractionBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], " ", 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]}]]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", 
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}], " ", 
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]]}]]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TagBox[
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]], HoldForm], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}], "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"5", " ", "p"}], "-", "5"}], HoldForm]}]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    TagBox["p", HoldForm]}], "-", "5"}], HoldForm], 
                    TraditionalForm], DisplayForm]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.7], AllowScriptLevelChange -> 
                    False], "Grid"], HoldForm], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], HoldForm], 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Grouping like terms, \"", 
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "5"}], "+", 
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    TagBox["p", HoldForm]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    TagBox["p", HoldForm]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], "-", "5"}], HoldForm], 
                    TraditionalForm], DisplayForm]}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    FractionBox[
                    TagBox[
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    TagBox["p", HoldForm]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], ")"}], "-", "5"}], HoldForm], 
                    TraditionalForm], DisplayForm], HoldForm], 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    TagBox["5", HoldForm], " ", 
                    TagBox["p", HoldForm]}], "-", 
                    RowBox[{
                    TagBox[
                    RowBox[{"5"}], HoldForm], " ", 
                    TagBox["p", HoldForm]}]}], HoldForm], TraditionalForm], 
                    DisplayForm], "\[LongEqual]", "0"}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Arial", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    FractionBox[
                    TagBox[
                    RowBox[{"-", "5"}], HoldForm], 
                    RowBox[{
                    SuperscriptBox[
                    TagBox["p", HoldForm], 
                    TagBox["2", HoldForm]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox["p", HoldForm], "-", "1"}], HoldForm], 
                    TraditionalForm], DisplayForm], ")"}]}]], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More forms", "input" -> "Result__More forms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Simplification", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-5/((-1 + p) p^2), {p, -1, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1258$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1257$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1257$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1258$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$684642$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1257$\
684647$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1258$684648$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1258$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1257$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$684642$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1257$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1257$\
684647$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1258$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1258$\
684648$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$684373[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][((-5)/(-1 + $CellContext`p)) \
$CellContext`p^(-2), {$CellContext`p, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1257$$], 
                    (
                    Piecewise[{{
                    0. + 1.0711830575849968` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0711830575849968` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1257$$], \
-1.002], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1257$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1258$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0711830575849968` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0711830575849968` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1257$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1258$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1257$$ + 
                    0.002004, 
                    CalculateUtilities`GraphicsUtilities`Private`max1258$$]], 
                    1.002]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> 64, 
                    Exclusions -> {$CellContext`p == 0, $CellContext`p == 1}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1257$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1258$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$684373] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$684373[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$684373[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMBKvQPiAhtsGYNKAk5Xu9+\
JJauHZmO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPjmSU9nu9nr5uzUfJaXoLT0+t2ZWzXBaCvj/\
LFWjNpEiv4bO71sRg9oCTH0C976Y1H6SaEePPb/B9wpOCEwPfDOPMMNCTfUXyKUt07RkpdmJ/\
MuEyIZz9hOevt4db20OPgqGMiDGghN5qi5hPFdGQ9hDohjU7nIjv/vikPH4uOI/\
huACRgH5kvWNFqIWRgnBMJ/\
jWK03UfczLEEGJopfOkhPnTtsLtFFMZGOY5fjGhVy9bItLVKY9NQ9Katbpx0d/Gx/\
I2IXkPS5nd3b8hYVxtdg7L6p/Tt0Az2/\
bwit5upI3TO8dR9qIYSegl9l80bpKnpCqZV3wc6ouabZsNMaLJ0z9j3TItFkO41XbMGB2ZCu8WnnL8\
MO28DLHlp9L+6E1X7yjBFw1GSq5fZK04PMomikPvEDbp6tz6/AY9yq+\
Y3SGVLDCiWycZbe47nhcgdc7Qoy1m2xAOqKeABHkYF3UcbvHMmZ2p0SRxALPr+\
uXPTaWdSgBd7avPROU2fHlCVm3NqE5SBfqTkwy/fpHxa3kcq7JkPcDYSADtVb0d7A+\
ypIr6FgGRhLjBU29BnNYJTUiKlj2gxIkzolgCMl+2Y/\
75h8uVgKp2leoLuVZHLjSnIUn0S8LfAgiM9Pmdh04uoLbFrOJ5Gmtuoil6eK02RzT/\
SbTjRuaAz2UhNCShA/0bk/o9oS/uCcs7cDdktAtCd2S0C0J3ZLw/y4JLmL8V/oNEFG3Hg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-5/((-1 + p) p^2), {p, -5, 5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1260$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1259$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1259$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1260$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$684976$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1259$\
684977$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1260$684978$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1260$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1259$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$684976$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1259$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1259$\
684977$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1260$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1260$\
684978$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$684707[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][((-5)/(-1 + $CellContext`p)) \
$CellContext`p^(-2), {$CellContext`p, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1259$$], 
                    (
                    Piecewise[{{
                    0. + 5.355915287924984 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    5.355915287924984 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1259$$], \
-5.01], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1259$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1260$$]], 
                    (
                    Piecewise[{{
                    0. + 5.355915287924984 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 5.355915287924984 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1259$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1260$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1259$$ + 
                    0.01002, 
                    CalculateUtilities`GraphicsUtilities`Private`max1260$$]], 
                    5.01]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    Exclusions -> {$CellContext`p == 0, $CellContext`p == 1}, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> 200, AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1259$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1260$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$684707] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$684707[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$684707[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "1:eJztVm1v0zAQbinv7/\
APkPiMNJhgH5AQ29iYNKAk5XtvsZNauHawnb3w58FnN0mzdpViOkBT+uFUX5rHd889d71nRzJK+\
71eT1+35qPkJL2Fp6fW7MhpLgtBPpzmimrNpEiv4bO71sTU7FIOZ5R4301r9qSagvHnt/g+\
8KTgYOg3wzgzjOrxvoJ8whJde4aKHdufjLlMgLOf9Pnrrc03G1seBUMZgjFUCf2qLWI+\
UaBp2kOgG9ZscxDf/\
fFJefxccB7THwUVCdWPrHekgFgYKYBjOsG3Xmmi7mNeBgQBRS6dJSfO7bYXaKOYyEZ0muMbF3K10RY\
XVKY9NQ9Kalbpx0d/Gx/I2IXkPS5nd3b8hYVxtdg7L6p/Tt0Az+/\
awit5spQ3TO89R9rAsGOqF9l80bpKnpCqZV3wM6ouabasNcaLJ0z9j3TItFkM42XbMOj0yFZ4ufIW4\
TfbwsscW34m7YfWfPGOEnDZZKjk9kmSgs+\
iaKY88AJtn67OrcNj3Kv4jtEZUsEKJ7Jxlt3iuuNxBV7vCDHWbrwG6Yh6AkQ0p9ZFHLe7LGNmZwIKE\
gs8u65f9thI1qEE3Nm+\
9kwQZseXJ2TV2oTmIJ2rO5hk8vWPilvJ5VyTIe8HwtCMqpWiv4P1UZZcQUYyMJIYL2jqNZjDKqkhqG\
DZD0qQOAfBEJL9sh/3zT+crwRSta9QXcqzOHClOQ1Pol8W+\
JCKzEya23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2xP+\
4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3igC3Jg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod4$$, 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False, False, False, False}, True}, 
   Typeset`aux3$$ = {True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
     "Simplify", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.536", 
     "parsetiming" -> "0.636", "parsetimedout" -> "false", "recalculate" -> 
     "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa37371fd36808026c8b0800004hgd24576b59e2644075896114757280157", "id" -> 
     "MSPa37381fd36808026c8b08000061e21cibf09h3836", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "64", "related" -> 
     "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa37391fd36808026c8b080000573a9ef2g25bid4i4075896114757280157", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "Simplify", "timedout" -> "", "timedoutpods" -> "", 
     "timing" -> "0.5670000000000001", "parsetiming" -> "0.", "parsetimedout" -> 
     "false", "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "58", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 5, 31, 14, 22, 52.844833`9.475577377112073}, "Line" -> 6,
     "SessionID" -> 18284141849260692275}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "simplify 5/p^2 + (5/p - 5)/(1 - p)^2"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{676., {1032., 1038.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa37371fd36808026c8b0800004hgd24576b59e2644075896114757280157", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.705193372886341*^9},ExpressionUUID->"b109a1dd-25b5-4216-9967-\
e30c443b107d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Question 5", "Subsection",
 CellChangeTimes->{{3.705548428531493*^9, 
  3.7055484336228623`*^9}},ExpressionUUID->"20955129-7e74-40f0-a17d-\
25b8621a5069"],

Cell[CellGroupData[{

Cell[TextData[{
 "integrate ",
 Cell[BoxData[
  FormBox[
   RowBox[{"5", "*", "x", "*", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "-", "x"}], ")"}], "4"], "dx"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "340c8adf-861d-4484-aef0-a71501325516"],
 " from 0 to ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "edbe6c71-b4ae-448b-9eb5-da3a9b8ee527"]
}], "WolframAlphaLong",
 CellChangeTimes->{{3.705548462889146*^9, 
  3.705548511421472*^9}},ExpressionUUID->"15dc0a1c-580d-46af-9b93-\
9043d84bbac2"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "integrate 5*x*(1 - x)^4 dx from 0 to 1", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Input__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integrals", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[5 (1 - x)^4 x, {x, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "1"], 
                 RowBox[{
                   RowBox[{"5", " ", "x", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "4"]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", "6"], Identity], "\[TildeTilde]", 
              TagBox[
              "0.16666666666666666666666666666666666667`5.", Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Compute the definite integral:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    RowBox[{"5", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "4"], " ", "x"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor out constants:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{"5", 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "4"], " ", "x"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For the integrand \"", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "4"], " ", "x"}], 
                    "\", substitute \"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"1", "-", "x"}]}], "\" and \"", 
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "u"}], "\[LongEqual]", 
                    "\"-\""}], 
                    TemplateBox[{"\"\[ThinSpace]\"", 
                    RowBox[{"\[DifferentialD]", "x"}]}, "RowDefault"], 
                    "\".\\nThis gives a new lower bound \"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"1", "-", "0"}], "\[LongEqual]", "1"}], 
                    "\" and upper bound \"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"1", "-", "1"}], "\[LongEqual]", "0"}], "\":\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{"5", 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "1", "0"], 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"u", "-", "1"}], ")"}], " ", 
                    SuperscriptBox["u", "4"]}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Expanding the integrand \"", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"u", "-", "1"}], ")"}], " ", 
                    SuperscriptBox["u", "4"]}], "\" gives \"", 
                    RowBox[{
                    SuperscriptBox["u", "5"], "-", 
                    SuperscriptBox["u", "4"]}], "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{"5", 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "1", "0"], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["u", "5"], "-", 
                    SuperscriptBox["u", "4"]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Switch the order of the integration bounds of \"", 
                    RowBox[{
                    SuperscriptBox["u", "5"], "-", 
                    SuperscriptBox["u", "4"]}], 
                    "\" so that the upper bound is larger. Multiply the \
integrand by \"", 
                    RowBox[{"-", "1"}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{"-", "5"}], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["u", "5"], "-", 
                    SuperscriptBox["u", "4"]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}, "RowDefault"]}},
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Integrate the sum term by term and factor out \
constants:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "5"}], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    SuperscriptBox["u", "5"], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}], "+", 
                    RowBox[{"5", 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    SuperscriptBox["u", "4"], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Apply the fundamental theorem of calculus.\\nThe \
antiderivative of \"", 
                    SuperscriptBox["u", "5"], "\" is \"", 
                    FractionBox[
                    SuperscriptBox["u", "6"], "6"], "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["u", "6"]}], "6"]}], ")"}], "0", "1"}, "", 
                    DisplayFunction :> (SubsuperscriptBox[
                    RowBox[{#, 
                    StyleBox[
                    "\[RightBracketingBar]", SpanMinSize -> 
                    3.5]}], #2, #3]& )], "+", 
                    RowBox[{"5", 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    SuperscriptBox["u", "4"], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Evaluate the antiderivative at the limits and \
subtract.\\n \"", 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["u", "6"]}], "6"]}], ")"}], "0", "1"}, "", 
                    DisplayFunction :> (SubsuperscriptBox[
                    RowBox[{#, 
                    StyleBox["\[RightBracketingBar]", SpanMinSize -> 
                    3.5]}], #2, #3]& )], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["1", "6"]}], "6"]}], ")"}], "-", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["0", "6"]}], "6"]}], ")"}]}], 
                    "\[LongEqual]", 
                    RowBox[{"-", 
                    FractionBox["5", "6"]}]}]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["5", "6"]}], "+", 
                    RowBox[{"5", 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    SuperscriptBox["u", "4"], 
                    RowBox[{"\[DifferentialD]", "u"}]}]}]}]}]}, 
                    "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Apply the fundamental theorem of calculus.\\nThe \
antiderivative of \"", 
                    SuperscriptBox["u", "4"], "\" is \"", 
                    FractionBox[
                    SuperscriptBox["u", "5"], "5"], "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TemplateBox[{"\" \[LongEqual] \"", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["5", "6"]}], "+", 
                    TemplateBox[{
                    SuperscriptBox["u", "5"], "0", "1"}, "", 
                    DisplayFunction :> (SubsuperscriptBox[
                    RowBox[{#, 
                    StyleBox[
                    "\[RightBracketingBar]", SpanMinSize -> 
                    2.]}], #2, #3]& )]}]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Evaluate the antiderivative at the limits and \
subtract.\\n \"", 
                    RowBox[{
                    TemplateBox[{
                    SuperscriptBox["u", "5"], "0", "1"}, "", 
                    DisplayFunction :> (SubsuperscriptBox[
                    RowBox[{#, 
                    StyleBox[
                    "\[RightBracketingBar]", SpanMinSize -> 
                    2.]}], #2, #3]& )], "\[LongEqual]", 
                    RowBox[{
                    SuperscriptBox["1", "5"], "-", 
                    SuperscriptBox["0", "5"]}], "\[LongEqual]", "1"}]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Helvetica", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \[LongEqual] \"", 
                    FractionBox["1", "6"]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    RGBColor[{1., 0.984313725490196, 0.6745098039215687}]}}}, 
                    GridBoxFrame -> {
                    "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> True}}, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False, FrameStyle -> 
                    RGBColor[{0.8196078431372549, 0.788235294117647, 
                    0.16078431372549018`}]], "Grid"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Input__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Input__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Visual representation of the integral", "scanner" -> 
     "Integral", "id" -> "VisualRepresentationOfTheIntegral", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[5 (1 - x)^4 x, {x, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{
              GraphicsComplexBox[CompressedData["
1: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
xvTWuL2dzDso+xkbqVA3DC3tr2IVB6+jSe1izCX3EWwwb9XtdnWB8kVqRrPs
KDgsxAfO37dHXXdBsmn1KAa6NHy+u5thm3ikl/WVMUSHKCfmHjfAsR6+120i
LD5Y5Y6fMtIAf9R9RbdcVn+ZEzgvZSGFJsq1EsPTrH7k+rj8t0Q2GHn/TQ1e
QeLL/EmJpfJm4rF5prVBOokclaHUzOSzhHbP6uwPguVoavwgqLyMhjCzYvPy
rErMaQyv1W2gIbo69fKSQTUkHb71OG6m4/d9t4p5sgbiiotLBazxlOjXTzvc
65Gjpq0a00vDntfFj/v0x5DD/WG3YPEBrGefXLWLHMPTAi/ZhUktDH41YSY8
HkdjFi8RZyIHQwGLAVENJtbxXA7lDueCz5koxd09TMRZNBoo8X4j2ldqcR7w
J8HZHW2/pPqE+Lgt9MilqSqk36UH/OCkI26r05XPb6j4fHpF5zcWL1bxHRaJ
1qjDOgsujhgWT3Ssqs/ofRvHUtThBJsSEVh6P4zxvM+E9cUxb97XU8TaiBOa
bVtIPF/2VGZXVilhnKCSpddLwiNQJt8wVpQwZ/qm8v+ioMtzp84rOTqUR4pS
217W4JK1VrilGh3+OQem76xnos60ZYvPNV6IdjoPrqUy4XNzl7E7c4D4Zz/b
VXuJxGx0RWpaThwhv1viq15CFSqeb/DMn6PBxnxnWrUxFbPpFm8OsOIPl72T
8s2NCcv0oJQE9jkideWmyRQxEg3GrZelPamEy+Kv4AoKCW6Hg8ktyfuJrjc9
quOx1SjV2tYQzoonb/Nm2gbdWsz9O+EyLk/Hj1+Ui/YTTMzK3DPi2dhJZKW5
q1c/J7F8UjN9ccCH+M7zTO3tPyrkzuiwL7L0cX3n8/tr4piQkMDkPZEJwks2
8MacLokzq5ZnH8rNIRRMLvaV/CHholD9LOdOps62V1ExmWL6mNKMnjm15hxa
Ai4Pd1HC4SqbRt3NzEGgDZfjsb0JkJ7M6jvpUgW5VmVbfpdUVNe9zN3h04A1
n+JCuHOyIPv0fNHgjRa8faj2YG5dPnbl/uho29mGN2d+1lYpF6NKSYjDRqUD
0ylfhE2OluHaziAtjvROvHXWLnBgq0R/kWLk3BsaAmMNbzvfZfV5O4596hGj
Q+M1re3MzhoYxMmZXmTVs8MLqcM7yupAX81X9H2W5Uei7Xac2tOIUCrXK6k7
rHxsEzxZMNOE7LE7kW+LOlEquPaqe+cgyycE+l6/GYUyk3VkUOAQsirlLfLu
huFMedPUYUUGHqrHR55rDwH3Ln2Li1QGipPi+/Z7+ePMWYtXBh7D2PQpfOUu
x1t4oHZExUp0BKud5CV+Wbli3ibQ9xplBPB5a5Nt5Iy0W++fCLmOwrmub+uf
Aiuo7fw0PCE4Bkf+CxIPtUxhn3Rs48PSMSQUdSj3iQKa5u9HexzG0VtWaCz2
Rgl8/+WvuruciRZPt3AqBPDc+ZLAYCoTwidPrOXwGSPOHB2XTzlCYi5viNe+
LY3oF7hUb7E9A/6n6v57NtGE3AtVn90u5OCV1ds7dRNf4XYn5pRafCHGT+ww
S9jXjneaj1vv/ykBh1XIh5fLOjF/7cKXNR/K0VnKVS6uTcMXA+5sXl0WT9ui
e6+M0PDgP7Y7Un3V0NryQO4qS88OyWUpsPvUgq3eKriB1R+r2KzsusLWgMqU
xCoNlp+UTZtfpXCDAR76w6wjM0Hw51ZK55Qexo2Pq078lPaF/XyViQRlGC8i
bXRcnl2HftINyT+XR2CvrMDtO+iCN+9/f7kqOQr63kIo0exBD4nZcLB8FAHP
nrzP6DSD0GarovHzY+hYqffkF80AdXYhh8oExpG7o8yuu1UDD/pk7b0yxyFv
xb/99zZpSF0lK/pPMqFaIegvHMQOteebpW6zkfDNUg8id34laOM/Wt59JPHr
WMAzte5LxOyaZ+dVFsuQu1T2MPlfJ9LMZXNz4yox2r5g2UGlgevo26W9W6uh
9sKpkK7I6nf6DZYyumrg7/n6NNsWll+4JbT2uF092m7OvF/6zlqPDP+vlzGG
R5WeLtzmxogKuJy/aWQMpp3YZR2xE7YSPzcmh4yj+EdRKMeEHCILWhkZKiz/
5CS0S6JwJc741kWpdzKxRadA4bnKd0IqzvnWBx8SlW6DuQ/8w4ma7b/T7b9X
QejsIa95DjrWFJxim3tAxSrKMLOXxSO6o8zRw9J1sPmYcGvFGjpy421jDbvG
wb1b9uBQrCgSN3K/FghggurPFSQ+ME3MZ9xPqFUg4TZhufKmazkRvuu0Ynwn
iYXf7j+GqzcSVdc9cIJOQbqC+3SyLB2zuo9HQu7XIHi6huvoVjq+2lJmxcWY
MHVftYdSwYelPzFmqyqYkKuotXh+aJDQ+6d0RNmZhFnoOzLyUjyhT/hs03pS
hdu+/5TdZ2ho+LZlD68mFUafFgyHWTz7UTuf4XWZiZCZg3I6PvNExMZT9glC
JE5t99dZWVpLfA6XWZQrIzF5xpSr9MgR4oByS/HW4GqsavfucVGlI/jugiBd
uRYlHKf2eG+io4Z3vstijInBg1OnpedoxLzBu/cKz0gEz75+06F4lzB9dq+E
8YOKzlnF9ydZ63fJVyT0w3MmTvjmOPJs+k3YIZ8xsZvEmofdNM6j+cTV/pjj
MiSJ7dziZ6586NSJmNCwnbGrgZTz/PX/WPXyVf7BrnErEgKZc9J/m5OIlElh
2whuKq5aObD1snhmb1u+J4ybxDqz0oCPDk2EYakf4+dnEjtVV/NG9doSSijo
y7eqxnvdi/4dynQ8cuUMG75Hwhlnw4YfPSDUEq99u5pLxenoq2q1rHhVbshS
etVJkDqKPCmCJcSy1YtE/w8SoelO6h2lnERaHfXsBVcSUlK04OzoGIJZry/t
b0fF4Zi9v5+y5ss7lwieqWf5E21j0l8YxEWx4VeJmdV4K3yq5DUrvxfE9xU5
xZEQaRMXYkZ5Etf84uJOr66B/LyqXggrX9+yd523nSUhuI9n6zV/Vx2OveJX
+sQ0sHXWYdpV9CSU9j8JzrgSjvrzb8+sCssB2XWc+414AiSeMiMbD1Qh6py5
jbJBKvpu3c6ItGuA+O392k6vs/DvqXHf6Ust4FPJ/knlykdGvgfRrdYGqwdz
xweEi4FzVrlimzrQbug78XB/GUQUuDarJ3cic/jCBZvpCnj4tV01j2P5yX49
yn1PCo6Lflv+TpQOiXq9SajWYElkg3MeKx8mB0v89uXWwSyYL+PgPMvfr65d
9mR7Izyu9XxP9WPx0e52UsZkE3KSjSwHSjrBJ3Ytu6BtEO9U0vYXPYtCN0+b
8/zdISg/1e9aiAzDooPI9uaNDPSsOhzL9TcEj1Z5e+dUMWBikrCnLcIfWRNj
/4pdhyFeHDtk++gWqsY6XF6tHYHSLva+AR9X5Mw/DyqrGIGv+iLHuRvO0GwV
qQ+7MoqTTRPDrTNWiCtdzaPNPwZyI+Wc5BlTvBrl915ePIbuuz6vaNeBSa9J
Tju7cXjcfSvLXLEZny1n+JrYmLjy6ttTsTcC4L3OecDuExM11MgbORbjRHBs
gG3vIRL7I4wuRv1KJ2Ks/UzOymTAJF9INnWgCeU6lxybzXJgf43pUDn4Fb3S
MtmLjwpBVcz73qbTDv8DEtHRwyUIWFj748l8B7pXqUQffVWOizK5eqaaNNRT
djly7ajC1N0QrWcMGvSNZym6rdVI0u1/8r/1st1U0qDbtRZ0oeJHWTJ0iK75
wHd7uh6/HN3Y1lNoKDTda5LkwcDbwT7P7LXB4Oq2bz8qOQyZrXkMAW1fZASd
eh9eMYyChy+mvfOuw8eRzWbHpRH8jrgovl/6Mqz3cVaWio8i7Qvv5gE2B9j+
WHW6tmQUF7a9yI3gPoGAzC+9253H0HAskd9Rcj9WvjVK0FozDqO0A/zxEtth
tPyyz0LaOK4K957deEMaVZVbKKrmTPCZt2hZ/2NHfGLlidkFJktPTTIMFr4S
i1q3eDsSSdA0NFTBcZWgfzDfd2WyDAXqU+62U50o6TzmnBlRidalEYlo1veV
RLzcf3ZjNfhu1T3lYelLIl/aukfNNXjgqOL8gqUvGSrZhvbm9VC8FRT88QcN
T7WH/uTsHsNSPGPlRLwxWilb+F8OjSHTsFs+hbET67F1r+q9cQhzGX+M15cH
sUZwdGkzE9cil0L+HONGZ+jZpk9tLP+2VCP4o+I7oT/KlkO/SYJxIEjb2TKC
oH3eYG/dUYX4C/dV7ixn6duSmaGkHxUBA1nibSxelD25f1lJmOVvPR1itvHT
4U5JzqvtHMcF5ZKz/XxiML1pGH/aj+UHgmQHq+//JS6XyvUYbCShkuwhKnC6
gsgN/OvwtY3E+cQ3T5dzqBA+hVeCPBspCCKWr/rAyv/3S/84ne7UoH3SxLOK
xR+v7BULTsJMaEf73he6thrXlu94GFTKhPvFG8JsK4aIs/rlIVaOJEzofAK3
B98Sx4pTf6gHVeFYJNsL6jSrv5RXCFbdzOJ7i2FoKotX96V3ZVMuMjG8ZkOt
vt4CsXL7VLS0AIkXH9QZxZN1BL0vT8usmASv+ZmwrJTjxLKrdZzHvVl+6hbb
rRYVOi6nnt2aLVuLmrX75AkFll9ZFyHYOsyE/iPP6NMknZAOI/otwkgUi/6d
FNUNILjod7l4aFTkB5yl+LDWT6jd7MnfSCYOJz5d65T5m2g9eFz6kjbLzzS+
Sn+ZUUBEbNkeemSMhG7LIwnRjkEdH8mX3l/Na6DtnnjMiVUvM1fkPCQtSXQ5
vQzcF/+ROKvFn5i7VI0oaepMCItn7S7WnrxcJCS06zVV+ZuJi6skNghnkSi1
E9Z6GuNA9N/N3tRzhKUvSo97ZVj6kvHlVZ1YEIkTBiGd761DCcbYRYXwT1Rw
Tlz508mK901Q4eJJNRJxbNvVtn8rITZaRtwQ+E7imJWKzEd7fqJVxP71iysk
OD7f2nrr90vinQCc352gomEowugaa/6BTItD4TUkRhwv3jc6sJeQs/kxVJNY
jRGmouN6Vn4fO/b8jYxl+aVn8szYmJuEEuU5w5ejBiWiS34UVr442FvfPv5L
4nDhkp1GepROa+kKrYXharTNpz9qY61H1hvjKI8UEtbu64LWrz1PzB5v0vXy
JbHauLtdsS6M+L/95f/bT7vyq4p5rYtElTuHg+BvaUI4ZtvMyB4qPMq+zKxj
xRtmdK/8TwWJ/pnF/y5UmBCdc7yXZiJJONk9NGLb5UtEmYZ6VjGpuEDZlqfC
ut8kkkN8YoLE+0Oix93rKDrTKetE3dZSIWRSy1RkxS/nMfIpO4+Eqtvh6SSa
FeHp4Bl1uJyK39VVoTms+b3ljhwZgyTqk86dtlJd0tG8d6DT7iIV91o3xaWy
rrNJKtC2NZG4WqczJ/9FizBoTPbbEU9i99Emd/F2dyJf552FjngNwv4E6Bmx
3ld4Pl5VbYHEyo/1SaWB23Qed9XnOUZSkTLMn9LPet6URWl6XtT/H/8P+LOD
SA==
               "], {{{}, {
                  EdgeForm[], 
                  Directive[
                   Opacity[0.1], 
                   RGBColor[0, 0, 1]], 
                  GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl1WW4EFUQBmA6FVBQbEXpDiUkDELpEkG6TJAWCaVLSWlppVEklEaQTumS
DmlQBARs39Ef751vZp/L3T17zpKpaesarRIlSJAgIXcS/l/P+1FQvaV+yBky
cpWW7GGt67+oHTlKUi5Ql+/o7voNtTMnSMslmrOV+a7/rLblIDf0Z9WX+Yoq
+ptqV06Rnsu8xQ5WuN5e/YG/5XNqTZbxjv599RipaMQGxpu3UvdxXC6kfkoB
+X61BbtZo39PPUISXmM13czTqM3Ywjx9G/UA1+WX1LlUlu9V3+R7luv/ooa8
lLfllGpD1jNOf4yC8ljyy/fFc7Ar1lOfWK3Dqngn+rvVpmyO9Yp3QTn5SyrJ
y/iT6volsW5yCrUB6+K59UcpII8hn7yaRHJtvuUD/VyuUVb/BRXlpfxBNf3i
eE55LEfIrx9NXrkrX8Z7pozZHCrIS/idqvpFvCGP4TD59KPII3fhC36itNls
ysuL+Y0q+m94XR7ND+TVjyS33Jk5XOVFs1mxv+TmjOIQecxGkEvuxGyu8ILZ
TF6SmzGSg+Q2G07O2GPM4jLPm82gnNyUERwgl9kn5JA7MpNLPGc2nbJyE4az
n5xmw8gee5AZXKSU2TTKyI35hH3kMBtKNrkD07lASbOplJYbMYy9ZDcbQtZY
ExoylD1kMx9Mlnh+GjCE3WQ1H0Rm+SmeJBNP8DiP8SiP8DAP8SAPkDHOV+xp
MpA+zgf3kI60sX7UZzC7yOJvDSRNrBX1GMROMpt/zN1ye6ZxnhJmn1NKXsQd
Kuu/pq48kB1x//qPuEteRUL5VVbSTj+VcxTXf0bJuNfYp2yPPae/TSV5YXwf
5ORqfdbGvenfVffG+Y+1UgeQWv41zhWnycCV+B6wM86c69fUDhxOmOC/j3F8
k29TixW0Nb6uduJ4PAMXacKmeP44L2pr9nNW/6P6LFMooe+iniRdnB22xRqZ
t1MPcUuuqC6gjpxMrceaWDf99nj3cn9SySv5h1f0y2kjp1YbszHWMO6BYvJk
issLYy2ooJ9PbXkA22JP6fuRUm7NFM5Q1GxSPIu8gJuU18+L9yf3Z2vsR31f
UsitmMxpiphNpJhci35sib1r1ofk8d6YxCkKm02gaDwbfdkc+9ysN8nklkzk
JM+YjaeIXJM+bIozYdaLpHILJnCCp83GUViuQW82xvkx60mS+DepTi82xLky
70Hi+H2q0ZP1cd7MuxP/nxeiKj1YF+fQvBv/Ao0Z+8Q=
                    "]]}]}, {}, {}}}], {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 LineBox[CompressedData["
1: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
RoyXdpY9Rw10M3bOtQ2RwffaP+XE1hrs8mYplB0hQ/Dv6sdKu2qwEMqiWzpO
hlg6yzmKVQ1sksUlPGlkJLfh9IBjDf6W9OZEM8iQWPbWb7xeA679AxWv58iQ
MvmrmvGoBn33IxxzfpEhv/Rng0NpDeL1Z2+d/0fGXqO5vAHBWry6nWi7Z1Mf
8m4rv22UqUV3167DdZv7oJrqmlS8pxZexed/mnH1Qe0PLfiZXi1mB4QnT/7X
B+LlrI3Z3Vo4GDbHLvD1gdS84+TRh7VYOp6WelygD4d+Xz6uHFGLIznpmdGC
fThqMLWX620tIlSP1G8T6YPOrzGOpr5aOAscqyuQ6EO9uNS/4vFavN8wbNQk
2Yfj+vY/M37U4vD3Dyu92/tgkDzy9eH6OjhlD473SffhS6N4541tdRj6nibf
KtMH4wXbegeJOkz53X/zSbYPpnpDOUcP1OHSPNzvyfehw0MkQ1m7DhU9PjWn
d/TBLMk6Qdy0DguIuCy9sw+n5vsD/12qQ9rh4aLMXX3oERX0pnrU4W2Z81X7
3X04c9zCffBeHVSCXIN5FPpgmdhrXRJbh4/WV9eeVeyD9haL1e/S6qBYYiy+
RqkPiv79r5Ny6qD+6/S5ZCYL/LYyjCivwzu7TS0qyn1Yc+XrnH9zHd6QF5wr
mEwdtIm91VcHenOMluaePvQaDxNXJpj3moarVRmTM1W/Bxmz1kPMstru2d4+
RGc4KBzdXI/V/SrWv5nsKzTRqSJYj/zbDR+MVPpw+anjHVnZehzf+Nshgclm
q6ZFBVXqYbao6PudyYTHlepNR+phRIyxSaj2QXZy9jKLUT1WHPxYTjN5i6UL
15xlPbrC3d3vM3m5mZY35lgPmzviF9KZPH7I1bKXeY8WXPjxtZLJrTk/WBr9
6jGievx7F5OLpa+nfXpaDwWbYM9vTE6NndfLflGPd1Pc70aY/GTjTUZKRj0z
1zV8Bph8y+d3dFR+PV4evLjQzORzP24fDPxcj2iOCf4CJhs4LA3faa2H+5Et
9Bgm7+/1fOg8WA/e7+o+15gsobey03a6HsH3c5sPMXljmU+76a96WBo2DK9j
8oIi6y2tNQ0Q3VBfUces/9tLP+H93A3o419092Vyw7Y1n+VFGqB3PXVFgcm5
Qf6OwjsacOXdRscepr4Jy2ybufY3oHfhev4NJgdeDcxZpdWAfbzC9E1Mdhvh
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
WKZe6vntxWuP4H9sEylo
                  "]]}}}}, {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                 LineBox[{{0, 0}, {0, 0}}], 
                 LineBox[{{1, 0}, {1, 0}}]}, 
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {651, 1}, 3, CompressedData["
1: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
                    "], CompressedData["
1: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
                    "], CompressedData["
1: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
RoyXdpY9Rw10M3bOtQ2RwffaP+XE1hrs8mYplB0hQ/Dv6sdKu2qwEMqiWzpO
hlg6yzmKVQ1sksUlPGlkJLfh9IBjDf6W9OZEM8iQWPbWb7xeA679AxWv58iQ
MvmrmvGoBn33IxxzfpEhv/Rng0NpDeL1Z2+d/0fGXqO5vAHBWry6nWi7Z1Mf
8m4rv22UqUV3167DdZv7oJrqmlS8pxZexed/mnH1Qe0PLfiZXi1mB4QnT/7X
B+LlrI3Z3Vo4GDbHLvD1gdS84+TRh7VYOp6WelygD4d+Xz6uHFGLIznpmdGC
fThqMLWX620tIlSP1G8T6YPOrzGOpr5aOAscqyuQ6EO9uNS/4vFavN8wbNQk
2Yfj+vY/M37U4vD3Dyu92/tgkDzy9eH6OjhlD473SffhS6N4541tdRj6nibf
KtMH4wXbegeJOkz53X/zSbYPpnpDOUcP1OHSPNzvyfehw0MkQ1m7DhU9PjWn
d/TBLMk6Qdy0DguIuCy9sw+n5vsD/12qQ9rh4aLMXX3oERX0pnrU4W2Z81X7
3X04c9zCffBeHVSCXIN5FPpgmdhrXRJbh4/WV9eeVeyD9haL1e/S6qBYYiy+
RqkPiv79r5Ny6qD+6/S5ZCYL/LYyjCivwzu7TS0qyn1Yc+XrnH9zHd6QF5wr
mEwdtIm91VcHenOMluaePvQaDxNXJpj3moarVRmTM1W/Bxmz1kPMstru2d4+
RGc4KBzdXI/V/SrWv5nsKzTRqSJYj/zbDR+MVPpw+anjHVnZehzf+Nshgclm
q6ZFBVXqYbao6PudyYTHlepNR+phRIyxSaj2QXZy9jKLUT1WHPxYTjN5i6UL
15xlPbrC3d3vM3m5mZY35lgPmzviF9KZPH7I1bKXeY8WXPjxtZLJrTk/WBr9
6jGievx7F5OLpa+nfXpaDwWbYM9vTE6NndfLflGPd1Pc70aY/GTjTUZKRj0z
1zV8Bph8y+d3dFR+PV4evLjQzORzP24fDPxcj2iOCf4CJhs4LA3faa2H+5Et
9Bgm7+/1fOg8WA/e7+o+15gsobey03a6HsH3c5sPMXljmU+76a96WBo2DK9j
8oIi6y2tNQ0Q3VBfUces/9tLP+H93A3o419092Vyw7Y1n+VFGqB3PXVFgcm5
Qf6OwjsacOXdRscepr4Jy2ybufY3oHfhev4NJgdeDcxZpdWAfbzC9E1Mdhvh
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
WKZe6vntxWuP4H9sEylo
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1: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
                    "] -> CompressedData["
1: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
RoyXdpY9Rw10M3bOtQ2RwffaP+XE1hrs8mYplB0hQ/Dv6sdKu2qwEMqiWzpO
hlg6yzmKVQ1sksUlPGlkJLfh9IBjDf6W9OZEM8iQWPbWb7xeA679AxWv58iQ
MvmrmvGoBn33IxxzfpEhv/Rng0NpDeL1Z2+d/0fGXqO5vAHBWry6nWi7Z1Mf
8m4rv22UqUV3167DdZv7oJrqmlS8pxZexed/mnH1Qe0PLfiZXi1mB4QnT/7X
B+LlrI3Z3Vo4GDbHLvD1gdS84+TRh7VYOp6WelygD4d+Xz6uHFGLIznpmdGC
fThqMLWX620tIlSP1G8T6YPOrzGOpr5aOAscqyuQ6EO9uNS/4vFavN8wbNQk
2Yfj+vY/M37U4vD3Dyu92/tgkDzy9eH6OjhlD473SffhS6N4541tdRj6nibf
KtMH4wXbegeJOkz53X/zSbYPpnpDOUcP1OHSPNzvyfehw0MkQ1m7DhU9PjWn
d/TBLMk6Qdy0DguIuCy9sw+n5vsD/12qQ9rh4aLMXX3oERX0pnrU4W2Z81X7
3X04c9zCffBeHVSCXIN5FPpgmdhrXRJbh4/WV9eeVeyD9haL1e/S6qBYYiy+
RqkPiv79r5Ny6qD+6/S5ZCYL/LYyjCivwzu7TS0qyn1Yc+XrnH9zHd6QF5wr
mEwdtIm91VcHenOMluaePvQaDxNXJpj3moarVRmTM1W/Bxmz1kPMstru2d4+
RGc4KBzdXI/V/SrWv5nsKzTRqSJYj/zbDR+MVPpw+anjHVnZehzf+Nshgclm
q6ZFBVXqYbao6PudyYTHlepNR+phRIyxSaj2QXZy9jKLUT1WHPxYTjN5i6UL
15xlPbrC3d3vM3m5mZY35lgPmzviF9KZPH7I1bKXeY8WXPjxtZLJrTk/WBr9
6jGievx7F5OLpa+nfXpaDwWbYM9vTE6NndfLflGPd1Pc70aY/GTjTUZKRj0z
1zV8Bph8y+d3dFR+PV4evLjQzORzP24fDPxcj2iOCf4CJhs4LA3faa2H+5Et
9Bgm7+/1fOg8WA/e7+o+15gsobey03a6HsH3c5sPMXljmU+76a96WBo2DK9j
8oIi6y2tNQ0Q3VBfUces/9tLP+H93A3o419092Vyw7Y1n+VFGqB3PXVFgcm5
Qf6OwjsacOXdRscepr4Jy2ybufY3oHfhev4NJgdeDcxZpdWAfbzC9E1Mdhvh
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
WKZe6vntxWuP4H9sEylo
                    "]]]][
                    Part[#, 1]]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     3]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, AxesOrigin -> {Automatic, 0},
               PlotRange -> All, ImageSize -> 200, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
              AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
              BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                LineBox[{{0, 0}, {0, 0}}], 
                LineBox[{{1, 0}, {1, 0}}]}, FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"}, 
              Method -> {"AxesInFront" -> True}, 
              PlotRange -> {{-0.1, 1.1}, {-0.7320497555306308, 
               0.40959994315167136`}}, PlotRangeClipping -> True, 
              PlotRangePadding -> {Automatic, Automatic}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Riemann sums", "scanner" -> "Integral", "id" -> 
     "RiemannSums", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"left sum\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "4"]}], "-", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["n", "2"]}], "+", "3"}], 
                    RowBox[{"12", " ", 
                    SuperscriptBox["n", "4"]}]], "\[LongEqual]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    FractionBox["1", "6"], "-", 
                    FractionBox["5", 
                    RowBox[{"12", " ", 
                    SuperscriptBox["n", "2"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`n, 
                    DirectedInfinity[1], {}, 0, 4, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "6"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["5", "12"]}]}], "}"}], ",", "0", ",", "4", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    Identity]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", 
                   "\"assuming subintervals of equal length\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`RiemannSumScanner`Private`intervals$$ = 10, 
                 CalculateScan`RiemannSumScanner`Private`method$$ = 
                 CalculateScan`RiemannSumScanner`Private`LeftValue, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`RiemannSumScanner`Private`intervals$$],
                     10, "number of subintervals"}, 2, 100, 1}, {{
                    Hold[CalculateScan`RiemannSumScanner`Private`method$$], 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    "summation method"}, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 
                    "left endpoint", 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    "midpoint", 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    "right endpoint"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$6391180$$ = 
                 False, CalculateScan`RiemannSumScanner`Private`intervals$\
6391185$$ = 0, CalculateScan`RiemannSumScanner`Private`method$6391186$$ = 
                 False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`RiemannSumScanner`Private`intervals$$ = 10, 
                    CalculateScan`RiemannSumScanner`Private`method$$ = 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$6391180$\
$, False], 
                    Hold[
                    CalculateScan`RiemannSumScanner`Private`intervals$$, 
                    CalculateScan`RiemannSumScanner`Private`intervals$6391185$\
$, 0], 
                    Hold[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`method$6391186$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    With[{CalculateScan`RiemannSumScanner`Private`delta$ = (1 - 
                    0)/CalculateScan`RiemannSumScanner`Private`intervals$$, 
                    CalculateScan`RiemannSumScanner`Private`epsilon$ = 
                    RandomReal[{0, 0.001}]}, 
                    Labeled[
                    Plot[
                    5 (1 - $CellContext`x)^4 $CellContext`x, {$CellContext`x, \
-0.09999999999999998, 1.1}, 
                    PlotRange -> {{-0.09999999999999998, 
                    1.1}, {-0.040959999999999996`, 0.45056}}, Prolog -> Table[
                    (Flatten[{
                    If[
                    TrueQ[Part[#, 2, 2] > 0], {
                    Opacity[0.1], Blue, 
                    EdgeForm[
                    RGBColor[{0.63, 0.64, 0.84}]]}, {
                    Opacity[0.1], Red, 
                    EdgeForm[
                    RGBColor[{0.9, 0.64, 0.64}]]}], 
                    Polygon[#]}]& )[
                    ({{#, 0}, {#, #3}, {#2, #3}, {#2, 0}}& )[
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$, 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$, 
                    (If[
                    Or[
                    Not[
                    NumericQ[#]], 
                    Not[
                    FreeQ[#, 
                    Alternatives[Complex, I]]]], 0, #]& )[
                    Quiet[
                    Which[
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`LeftValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    5 (1 - $CellContext`x)^4 $CellContext`x, $CellContext`x -> 
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    N[
                    ReplaceAll[
                    5 (1 - $CellContext`x)^4 $CellContext`x, $CellContext`x -> 
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$]]], 
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    5 (1 - $CellContext`x)^4 $CellContext`x, $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + (
                    CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$)/2 + 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    N[
                    ReplaceAll[
                    5 (1 - $CellContext`x)^4 $CellContext`x, $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + (
                    CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$)/2]]], 
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`RightValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    5 (1 - $CellContext`x)^4 $CellContext`x, $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$ - 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    N[
                    ReplaceAll[
                    5 (1 - $CellContext`x)^4 $CellContext`x, $CellContext`x -> 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$]]], True, 
                    0]]]]], {
                    CalculateScan`RiemannSumScanner`Private`i, 0, 
                    CalculateScan`RiemannSumScanner`Private`intervals$$ - 1}],
                     PlotStyle -> AbsoluteThickness[1], ImageSize -> 1.5 200], 
                    (If[
                    NumericQ[#], 
                    Grid[{{
                    Row[{
                    Style["integral: ", 
                    GrayLevel[0.6]], 
                    TildeTilde[
                    Rational[1, 6], 0.16666666666666666`]}]}, {
                    Row[{
                    Style["Riemann sum: ", 
                    GrayLevel[0.6]], #}]}, {
                    Row[{
                    Style["error: ", 
                    GrayLevel[0.6]], 
                    Abs[# - Rational[1, 6]]}]}}, Alignment -> ":"], ""]& )[
                    (Chop[
                    N[
                    TimeConstrained[
                    Simplify[#], 0.5, #]]]& )[
                    Quiet[CalculateScan`RiemannSumScanner`Private`delta$ Sum[
                    ReplaceAll[
                    5 (1 - $CellContext`x)^4 $CellContext`x, {$CellContext`x -> 
                    0 + CalculateScan`RiemannSumScanner`Private`k 
                    CalculateScan`RiemannSumScanner`Private`delta$ + 
                    CalculateScan`RiemannSumScanner`Private`delta$ 
                    ReplaceAll[
                    CalculateScan`RiemannSumScanner`Private`method$$, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 0, 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    Rational[1, 2], 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    1}]}], {
                    CalculateScan`RiemannSumScanner`Private`k, 0, 
                    CalculateScan`RiemannSumScanner`Private`intervals$$ - 
                    1}]]]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`RiemannSumScanner`Private`intervals$$, 10, 
                    "number of subintervals"}, 2, 100, 1, ControlPlacement -> 
                    1}, {{CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    "summation method"}, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 
                    "left endpoint", 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    "midpoint", 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    "right endpoint"}, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+ARKfUdkQEh+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3n2auf1cHs4dDAYyxi0JpKrnbaQeSZBkaSHQDeMeceAf3P\
Hx+XxU8FYSL4XhEdEPTTeiYTYwAgODPPxvvVqM3UPE9PAY5DxpdNk5Tlqe4HSkvJ0QmY5vnExWS/\
aAoNMlePmfsnNOgW58G/hAxHamJzHJm3PlkC/MK4Yfedl9c+5G+\
D5bVt4KU5XE4f57TLkDTQ9IWqZzuet6+QYqbrWRj/\
n6rLmy0aDvHjK1P9LR1Tp5TC224ZBZsemxqu1twz/si28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgOQlLg+"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More cases", "input" -> 
         "RiemannSums__More cases"}, {}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[5 (1 - x)^4 x, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    RowBox[{"5", " ", "x", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "4"]}], HoldForm], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"5", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["x", "6"], "6"], "-", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox["x", "5"]}], "5"], "+", 
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["x", "4"]}], "2"], "-", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox["x", "3"]}], "3"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "2"], "2"]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
     "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
     "1.7550000000000001", "parsetiming" -> "0.8260000000000001", 
     "parsetimedout" -> "false", "recalculate" -> 
     "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa30551ia60f4hgb300g2300005g8h8ga61351hig04820211610743569143", "id" -> 
     "MSPa30561ia60f4hgb300g23000043h4fe4g9c2fe844", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "57", "related" -> 
     "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa30571ia60f4hgb300g23000031i433h57fefd5064820211610743569143", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "1", 
     "datatypes" -> "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
     "0.655", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "59", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 6, 4, 17, 1, 56.9171808`9.507818217055338}, "Line" -> 1, 
    "SessionID" -> 18286466757777930751}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "integrate 5*x*(1 - x)^4 dx from 0 to 1"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{683., {1033., 1039.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa30551ia60f4hgb300g2300005g8h8ga61351hig04820211610743569143", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7055485174492927`*^9},ExpressionUUID->"d7a09714-e76f-40ef-84d8-\
1a66babb6dfe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "integrate ",
 Cell[BoxData[
  FormBox[
   RowBox[{"30", "*", 
    SuperscriptBox["x", "2"], "*", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "-", "x"}], ")"}], "4"], " ", "dx", " ", "from", " ", "0", 
    " ", "to", " ", "1"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "23723d1b-6791-4753-9068-00b2f1e1be9b"]
}], "WolframAlphaLong",
 CellChangeTimes->{{3.705563410156842*^9, 
  3.7055634457895627`*^9}},ExpressionUUID->"835aa4ea-ce53-4922-9942-\
26e6c3596736"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "integrate 30*x^2*(1 - x)^4 dx from 0 to 1",
    Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[30 (1 - x)^4 x^2, {x, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "1"], 
                 RowBox[{
                   RowBox[{"30", " ", 
                    SuperscriptBox["x", "2"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "4"]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["2", "7"], Identity], "\[TildeTilde]", 
              TagBox[
              "0.28571428571428571428571428571428571429`5.", Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Input__More digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Visual representation of the integral", "scanner" -> 
     "Integral", "id" -> "VisualRepresentationOfTheIntegral", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[30 (1 - x)^4 x^2, {x, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{
              GraphicsComplexBox[CompressedData["
1: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
EJoPmhn9mAHri+cTNW6NQTuQJ3TJ9yQE7dRTMBYbh92LpT3mudGYN/Xzcqof
x5dd/jPDd0OQdzfjkciNCTivmJx1vOuNnQeyx6aEGdhqttPbyvAmLDNPbw6u
ZEBGWLjT6qc1FM9lTHyxYuKnPp12/7w+BBaX8t/nZiHe81VgwcsDiLt8TWg4
l4XTt43NBO+JwFqfuSlHj40NybRVfkVdxFnfr1wbjXwxJKllpppki/ELSot4
sxMx9iv8gR0jFgqmSz87cnzCu0Vp6sx1pB+5IT7Uqt2KOxykYlQahNql4BNt
sW2Yvu3QOidAR1+r3Frj8XaEa115FJ1Ox9Uv50N2qlHw48Vrmwt/6cgrHPar
CKFiReiHHB6y/+a5k8Z6emn4FCuUaTNG4o3X/oMm27vgmqE9uo7EK8v5Ou01
9WM4LwuNAx7xUMt0kfzhMI6UZAfxwE0RSMn4Xn5dcgJQEpf/8sMfPYHxG3Wq
J/A6tuCziv1diGw3fse0Y0DAZ+74Y0d7NFkE6lYJMdE8c2jipZUxgvqlLV1f
M5G4hnslK0QDUtfZNQOGLFQohAa1sWWxM267lAcHG1MSN5JTJv8Q3czB9vQX
ZP4uP/Vfuy2K0FqRdag8/hbMc+eVq3R0YOp4+vd15Tgc+DsZ82FbOHZS9n1b
HtGO3IACVo4vHe0r1y1yY3VgWSjlnDqLjnDpjZltBBUXXtDDa8l8SIdIf5T1
o2HTUJzDnlk6pPN9OhzAIPPwdVGtuBNifB1Kt4wz8M/BKVP8nAXM1wxtfhlI
+qlcr/B3HDqILqOM5iuw8K1hVe+1vbth7dUUs7uLBd/aa5aZnbyQSrp8N+se
GyYXy047aJUTvNxXR4YvhWJHT1/M0m1uCGreeC5LpQNjug3qvNV0LMmKWD0c
S8EL5p5TGuS8t2pmWef2USEk8ZSTRuJvp4vk0uA9nVjeWsbdQ6Wj5Jl5guZn
JoJPjMd0HlDB8818yUK+LOw8rpZXb7Ye8/kP0xpl2TggJvaPw5ZBRB402/qs
i43grJmdWZx6xM6Nh/N+SNliytstI15tN3yyPI8kVXfAS5hRvWWI9E+GKso9
q6j40+jxuovk770dVqUtF2gQpH6LeLlAR4d5/ZyEOAujbg97bhXsw8KP+DP8
NSyMHD4jUCO6Ekdnt+nJXWZjx/eBy1JxTYSC2uafPhYPYXzs+rVeoxsoVf2l
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
fS/9P4aYEuk=
               "], {{{}, {
                  EdgeForm[], 
                  Directive[
                   Opacity[0.1], 
                   RGBColor[0, 0, 1]], 
                  GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJxF1GfcjmUYB+D3NcuKSHto2JvKbhnZJXunkq1ChJDKnpWdTWVkU0i27L1D
RlZltMyi46wPfTh+5/+8nve5n/u+r/N6szRpW61NkoSEhESSJ/m/FlSTqT0t
XOAOrtOagyzz+U31HU4l/neBP6nNWjrHku93k38mLVd4jZ184fO/1XYcjb/R
/6Y+xxwq6ZP6fg/5HBm4RnP2ssDnb6snuCz/oVblG5rqu6pnSUkjNvOJ9TfU
w+yT86mfUkDOpLbiQFxD30k9yU25lromnlVOo77KDj7Xv6X+wE/ys+psKsrp
1WbsYb7+ElXkpfEO5BRqQzbxsX4veeUx5JeXcoOa+tV0klOrr7Cdz/RneUae
RQV5Hn9SWb8k7jP2Um3ARj7S7yGPPJp88pLYB2roV9FRnsoZntZ/SXl5brxj
KukXx33IQ9lNbv0o8saeMIXTPGVtJs/Lc/idivqvaSIPYRe59CPJI3dgMqco
ZW0G5eTZMR9U0H/Fy/JgdpJTP4LccnsmcZKS1qZTVm7MIHaQw9pwcsntmMiP
lLA2jTJyIwaynezWhpEz9psJnKB4zDGl5YYMYBvZYtbIIb/JeI5TLGYmZlxu
QH+2kjVmgOwxQ9SnH1t4LPaNbLHX1KMvm3nU+lCyxt9FzyM8TBYe4kEe4H7u
417u4W7u4k4yx15Tlz5siuu47pA497GP1KE3G+P61geTSX6DcRyjaMwlpeTa
9GJD3Iu1QWSUF/MX1fUraSuP5ShF9FMpKc/iV8rrF1FLTqbWZwMf6tfHM8oD
uV3OqLZkf8yY/jovyStoI78b55RUMX9si/Mfe6QeiXMcv6k+yRRK6JP4H9Rd
/oXbuMrr7I6z4fMbageOczFmPOadhdRMiAskJHSRz5CUy9RjPR/4uK16iO9i
r9QBZJDfU8/Hc9GCfTH31juqP3JNrqYup7V8a5wJtjJGf4Qn5MkUl2dygXL6
BdSIW1Prxm/zvn5dzIrcn/TyIq7yov5bWsmjOczj+kkUk2dwnrL6+VSXe7I2
5k7fL96d3JJRHKKwtYkUjT2K52VNzKi1vqSTWzCS7ylkbQJF4rnpweqYZ2t9
SCs3ZwQHKWhtfOxl3D/dWRWzb603aeTUpIp3xy2kJAXJ493xAt1YGefFd3qR
LJ6dqjFPrIhzFPMY+ys3YzgHKGBtHIXl6ZyjjH4eVeSuLI8zGLOQ+O+oJCzk
Svy2flnMWtyb2pgtDNPvJ788lkJyOrUpu5imb68ei5mVS6tzqSx3Vk+TyCXq
sI4ucSbjjPB97LX+opo55oJ/AOwoAec=
                    "]]}]}, {}, {}}}], {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 LineBox[CompressedData["
1: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
vPxXOSdFhW7DTJpI7zTRcFqr+8E+KoLnB7t0QicInjy74Q/yVDDnbZ5UYB8n
TDc9pawqUuHlPfeZFjJKDFW3sj45xPDnaEVgdfswISW+yFlHUKGdHMn9LWSI
uOb6n9DGI1TEaeQ9jzQfJH4pW8qH61Chz3JhKPZgP6FTqFMXp0vFgwMq3j9O
9BHP5eUvZRpQsXJznlfqdi9xcA9zWMVpKqTZo8bK1nURgZmTuxpMqZjJ1432
utNB9Em2VXSZU7GVdlRAb6GNcBVLpVEsqZjeRI3/o9BCNMc/9VuyoiIlpzVi
tK+ZEBW+K8p2hYqn52YV9jk3EjdjzpdwO1BxtJ9/6w3leqKSX9tQ5Dojvkmq
oyF/HcETsW98100qFFKakn34vxCXube6K96mIuCvk/FnpWqCdeP4G90HjPHb
fJxmDZWEif+3Y6aPqciT3tJ6QKOCSGcr/XnZjQqBsb/8LonlxKJX0v0bnlTc
1thFdaa9J44xBXA+9KGClY1+S/RmCfHc1SnDx4+KyJtypAMiRcT4sjnCAqnA
evaf0QsFRMCijOOrMCr4LMbD32x/S3y/zcteGEGF0L8B58TeHGIPfSWeFE2F
fZz6P/YPmcTjGyPK9S+oOGn6372PP9OJxqnGps44Kkw83/KzH0klttkX2Q4l
UmH7+08GfiYRN0bj/82kUBHlUEFUXkkgSFa+UX/SGf6Yr72/5BxLcA067lub
RcVk5T/4TkUTly6Y1XDlUnFCw3/oT0kEkf/98AXht1QY8nUOCH4PI5jP7l6U
KmD4u+biudboYOJUJ3fw/iIqhlRjGxU3BBCpp5Z2opQKHsP7nMprnxDz34bK
T3ygQtwmVl/kkSehZVBvcobE0Pf8i6zD1a5EVH3BzKUqhn7k1TfUWj0gxnRe
+lyvpkLQ95bbn493CNUab5EHtVSoxse+/vH5JuF39Po773oqmo++3Pih1oHo
qTDRD22iQi7LVCVQ0IaQJoiR2BaGvTZeQW9LS+JhmaRLRjsVMTznQsKWzYh6
VU6+gi4qfs/Te31fGxPCRb9yPvYy8ltlbplloEtc3z+g+fUHFTVZQsO/rh8l
Pr6t7esYoOKc/a+z9rUHic378u4MDlNRyLxtoPiTPHExO2bjzCgVtfUu8+8f
ShJvd3mm/p6gQsXIf31PoyCxJt1BjXWGig55XSPFqE2EkcSpdk4aw7+v/QNh
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
LCaGDp1v0g4ZH67jf6imUhQ=
                  "]]}}}}, {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {{
                 LineBox[{{0, 0}, {0, 0}}], 
                 LineBox[{{1, 0}, {1, 0}}]}, 
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[1, {749, 1}, 3, CompressedData["
1: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
OC7+B7WOI3Q=
                    "], CompressedData["
1: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
/iNy
                    "], CompressedData["
1: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
vPxXOSdFhW7DTJpI7zTRcFqr+8E+KoLnB7t0QicInjy74Q/yVDDnbZ5UYB8n
TDc9pawqUuHlPfeZFjJKDFW3sj45xPDnaEVgdfswISW+yFlHUKGdHMn9LWSI
uOb6n9DGI1TEaeQ9jzQfJH4pW8qH61Chz3JhKPZgP6FTqFMXp0vFgwMq3j9O
9BHP5eUvZRpQsXJznlfqdi9xcA9zWMVpKqTZo8bK1nURgZmTuxpMqZjJ1432
utNB9Em2VXSZU7GVdlRAb6GNcBVLpVEsqZjeRI3/o9BCNMc/9VuyoiIlpzVi
tK+ZEBW+K8p2hYqn52YV9jk3EjdjzpdwO1BxtJ9/6w3leqKSX9tQ5Dojvkmq
oyF/HcETsW98100qFFKakn34vxCXube6K96mIuCvk/FnpWqCdeP4G90HjPHb
fJxmDZWEif+3Y6aPqciT3tJ6QKOCSGcr/XnZjQqBsb/8LonlxKJX0v0bnlTc
1thFdaa9J44xBXA+9KGClY1+S/RmCfHc1SnDx4+KyJtypAMiRcT4sjnCAqnA
evaf0QsFRMCijOOrMCr4LMbD32x/S3y/zcteGEGF0L8B58TeHGIPfSWeFE2F
fZz6P/YPmcTjGyPK9S+oOGn6372PP9OJxqnGps44Kkw83/KzH0klttkX2Q4l
UmH7+08GfiYRN0bj/82kUBHlUEFUXkkgSFa+UX/SGf6Yr72/5BxLcA067lub
RcVk5T/4TkUTly6Y1XDlUnFCw3/oT0kEkf/98AXht1QY8nUOCH4PI5jP7l6U
KmD4u+biudboYOJUJ3fw/iIqhlRjGxU3BBCpp5Z2opQKHsP7nMprnxDz34bK
T3ygQtwmVl/kkSehZVBvcobE0Pf8i6zD1a5EVH3BzKUqhn7k1TfUWj0gxnRe
+lyvpkLQ95bbn493CNUab5EHtVSoxse+/vH5JuF39Po773oqmo++3Pih1oHo
qTDRD22iQi7LVCVQ0IaQJoiR2BaGvTZeQW9LS+JhmaRLRjsVMTznQsKWzYh6
VU6+gi4qfs/Te31fGxPCRb9yPvYy8ltlbplloEtc3z+g+fUHFTVZQsO/rh8l
Pr6t7esYoOKc/a+z9rUHic378u4MDlNRyLxtoPiTPHExO2bjzCgVtfUu8+8f
ShJvd3mm/p6gQsXIf31PoyCxJt1BjXWGig55XSPFqE2EkcSpdk4aw7+v/QNh
1/6qJyceuiY0R0XI8/fReSoT6nMiO1ilFqngd3BLfbm3RV0zduNLhT9UhJVu
0wg/+UY9QmBhP7HCqP/appzXp+6rj0T+qD++SsW9tlMxz+v61WLXD+dJM9Gg
JeGxteWbrvpRnS6Xt8w09PzZIygT/Fx9+kn9cWVWGg5E+XSLPKpSj6gm8X1Y
S4OXAPWFcc1Pderj3yoH2Wm4sj//lNDmefUTivLmJetoCKSwhZGPriXSp+wf
K3PQ0LXKe2uOlZdgSkmOL9xAg+qLUZFbx8WIc+bfKxQ20XDy0Rnf7AUZooSb
d/jtZho6LHvbuh4oEVvq9NbKctFgeFLV9Vo6iBvuPlK53DS49JJ9+/y1iTqV
j8dlttAY92fN2gL5k8QO6uLVTF4adgtNr1zjNiHc02WDpfhpEFiYNr7Qb0F8
P2/3Nm0rDX6qBwd8/7tMKPMltUr8R8NygnSVjsQVIryhZz5JkGG/q6m2dfd1
YsaLZ6uoMA0J9ptL5CSdCJ1DugfiRWhYG5Egy3bmHpEy62UhvJ2GV3ljfmSl
R8S/zA8uL0RpaNS5JCp0zZ0wv7SQICBOg4gzv6LMKy/incC+qigJGgQNaj/o
nPUluL7Zknl30vApeOfWLQGBxDXfBLZnkjTkpQhFtoiHEl+I7l3cu2jQlZOd
qK4PJ8QXuXRDdtMQpqYiOVMdSbjkHr++SYaGkFEnw8CtMUS3tWdI4B5G/mWS
2MW/vCT2C5flrd9HgxPb+Qsl1xOJ4La5Nl9ZGmR3fr/9PjeZmAjYs7hWngbe
nvxtSlJphOYRGwFvBRrEWbKcRn5kEIl/4g4yK9KwoN7fldGRRSy/7TznrkTD
/I/qnc48r4kzdpxu/5QZ9nYJ/1RteEvkb9dJeqxKw9Zeon3sXT6xqcv909IB
Rv5/KJy5V1tI2AWXjjgfYtibyy8SYysmPmnNsv9SY9jz+XlE5VYpse2vtPRd
goZU1g5D3o0fiParL2/c0qDhotFT67szFYSsREco9QgNEcren375VxEBvZsK
rmsy4rVO07Q/+pkYDdPumNKiIZwayykmVENoHHf7ZX+MhgyrRw9ceWqJl2tK
/hvXYeilMmrDhPRX4ncx7ZDtCRq+HzYP+GbTQLyWvOx+WZ8GvbUCZm6p34j1
/S+SBwxomFDKFZdaaiGsI9s+XzCkYXtRsBm/dRshxKq13uIUDU0O6v1Mzp3E
vTIXmZ7TNOxinhVMlegmWp2K9E3PMOpHMjOlZ7SH8BuUCj91loY9f9LnnYt/
EMPPLQtbzBnrmSEVnFXzkyAMYzpPnmPE0/Qk2O33ALHwkUNI7yJDz2+/TV3R
HyYM7x1V/2pJw/ue4S1CwWQiZ+/jizqXaQjeH9d/vH+EuPxyJkXThoZLqTzm
wm/Gia8v96kN2zLquVKLOGM8SSjEObZ72NEQV/vsiAbHNMEST2clXaXBVbA9
YOI9lbgWrxB3/joNVOLu3JNeGtEef1tp5QYNVhdNGsyG6URqwoLNAScafv8+
9rTgv3liY6Lyv67bjH7gmWGxcmyBuJt4P+reXRqqnIUzvb0WCe2kPzUFzoz6
f5f3kSzxhxhL/iu1z43xv9ZiQQW+VcIwhahocKfhyGWNF+fPrUFJipvZVU8a
THgo968oM8Evlcn/lQ+j3tbpC+xlZQEt9YjYMV8aXrzb3GPxmwVn07xKR/wY
etq8efzdAiuk09dOij+l4afLXF/vRnaEp2t7VgbRUJ9rqbldah2W0n0FLUMY
8f1w+uehux71Get148Jp+EDTfhRfsAHXMjflbI2hwabu91EJby60ZxpoFr1g
5H+p9ayWOjfUs0L6Tr+koUFaztVlhRubs7k3hSfQwPfBxrIsaAvuZRunySUx
8tUmOMJuyYv+7Gfqzck03BQvY/utyoc3OXw3NqbToPBU6rLJKj8Ecs+wZWfQ
4PDiV/PGma1wz42OP55JA7+hw9GVQQEYvv6v+UkODWe9WGyFhwQx+0ZEjqmA
0T/slhSzsB3mby/UJhTScPwbT36Bkiiq3iZYEkU0CKtF7WpsFsWzPLGwR6U0
2GmoGbNyi0OxYOfsAomG2u1Mj3vqduBlgW1ARCUN5wRZLg977cTawgzx/Z9o
mLWhHuo4IonOwt2nbtbQQHq7L7m+WQr3i/YWTjYw9GcjNBm4Swa2x1rCrzfR
8CB5rGhuRQanu+/cojXToKO1lvdo5x7ILZXtW2ylIXmoVGU8eh/G1U9kMvXQ
cH7zZp4qxv2os2nG17uXhp3e52LfZMvj88UwW/Y+Rr7Noxcv71VAoke3xKaf
jPXPvtandWA/zKpt4wVGaFjXFxO8h3Ff0z7D4RI7yqgf1/F9zhzKUBzLtdg2
ztD/+RSnwRRlcK1fENgxRcOhbJvAgwMqqNXzeiZLZ8Rrd6Va151xH2xP8NP+
S0MJpd5XVvEwJG2OXqn7R8O13+Rl9tjD4F0c1dJbQ8fAsXurzSwaoG3dx2LM
QsdhslGwzncNvLL44HJ+PR1H93y+9Sz5KKKmL54b4KDj3vcb+Qn/acLbheWQ
1UY6VEOVnb+Fa8Iy4cRvO046wuSTl98HakFguNvpDh8dWx5le9x7fgxsdx4b
/eKng+mw9H57MR3Ms4rKPRSg4zwlyLskRwffJK/MuAnRUZ3Nzh7w9Tj8HBau
BIrR4TkZdL5GQg9/6Nznk/fSIeP9rj4+0xDkzxMHjGXpEP1p76SwyQhN0ZX8
zPJ0mHeWmQc6GSFZ/da3S4p05LYVXk05Ygw9/29HxQ7RUXHwh8rGP6egfO6V
aIsaHazpU7r2V09DVNb9rztBx4nb9a9Kf57GQrts8YAGHUILTOv1mkwQLxoi
nahDx+eaar2BT6bwm7NlNzxBR5tWnba7thlu1xDkVV068nQHVDTrzaBzjRJ3
8SQdcQYHJIy+nwW9WJ97+xk6rpZFP5bnPwfNkxt/x1nR0TMaGH/J1RL7xMnt
+jZ0FMVWfTVptWTs62V5f23p8OHbXhoqdQkzL65ePe9AR62qXct4xyVEjX7t
F75FR/QG5yHvI1aYcPGvjnWlo47l+HjUBVu0G15K1nWn4xMfa11arS0+Shxw
W/ZgzPfx7FVSvILwunFVCx86nt5Q/TXOaQc1Pp0cwad0cLmbqazrtYfk+Hb/
r0F0GOR3RgQZOoCr7JfNwxA63uveeVpQ64ARy4ztveF0CEtfuUkvv4pv+91W
/CPo4HBZ48Z96Bres5n2HIiiw2nr8WtDpdeQ2rOvaCKajobmQDO7g9cRnMP2
LCaGDp1v0g4ZH67jf6imUhQ=
                    "], Automatic, 
                    Hold[
                    Nearest[CompressedData["
1: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
/iNy
                    "] -> CompressedData["
1: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
vPxXOSdFhW7DTJpI7zTRcFqr+8E+KoLnB7t0QicInjy74Q/yVDDnbZ5UYB8n
TDc9pawqUuHlPfeZFjJKDFW3sj45xPDnaEVgdfswISW+yFlHUKGdHMn9LWSI
uOb6n9DGI1TEaeQ9jzQfJH4pW8qH61Chz3JhKPZgP6FTqFMXp0vFgwMq3j9O
9BHP5eUvZRpQsXJznlfqdi9xcA9zWMVpKqTZo8bK1nURgZmTuxpMqZjJ1432
utNB9Em2VXSZU7GVdlRAb6GNcBVLpVEsqZjeRI3/o9BCNMc/9VuyoiIlpzVi
tK+ZEBW+K8p2hYqn52YV9jk3EjdjzpdwO1BxtJ9/6w3leqKSX9tQ5Dojvkmq
oyF/HcETsW98100qFFKakn34vxCXube6K96mIuCvk/FnpWqCdeP4G90HjPHb
fJxmDZWEif+3Y6aPqciT3tJ6QKOCSGcr/XnZjQqBsb/8LonlxKJX0v0bnlTc
1thFdaa9J44xBXA+9KGClY1+S/RmCfHc1SnDx4+KyJtypAMiRcT4sjnCAqnA
evaf0QsFRMCijOOrMCr4LMbD32x/S3y/zcteGEGF0L8B58TeHGIPfSWeFE2F
fZz6P/YPmcTjGyPK9S+oOGn6372PP9OJxqnGps44Kkw83/KzH0klttkX2Q4l
UmH7+08GfiYRN0bj/82kUBHlUEFUXkkgSFa+UX/SGf6Yr72/5BxLcA067lub
RcVk5T/4TkUTly6Y1XDlUnFCw3/oT0kEkf/98AXht1QY8nUOCH4PI5jP7l6U
KmD4u+biudboYOJUJ3fw/iIqhlRjGxU3BBCpp5Z2opQKHsP7nMprnxDz34bK
T3ygQtwmVl/kkSehZVBvcobE0Pf8i6zD1a5EVH3BzKUqhn7k1TfUWj0gxnRe
+lyvpkLQ95bbn493CNUab5EHtVSoxse+/vH5JuF39Po773oqmo++3Pih1oHo
qTDRD22iQi7LVCVQ0IaQJoiR2BaGvTZeQW9LS+JhmaRLRjsVMTznQsKWzYh6
VU6+gi4qfs/Te31fGxPCRb9yPvYy8ltlbplloEtc3z+g+fUHFTVZQsO/rh8l
Pr6t7esYoOKc/a+z9rUHic378u4MDlNRyLxtoPiTPHExO2bjzCgVtfUu8+8f
ShJvd3mm/p6gQsXIf31PoyCxJt1BjXWGig55XSPFqE2EkcSpdk4aw7+v/QNh
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
LCaGDp1v0g4ZH67jf6imUhQ=
                    "]]]][
                    Part[#, 1]]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     3]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, AxesOrigin -> {Automatic, 0},
               PlotRange -> All, ImageSize -> 200, AspectRatio -> 
              NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
              AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
              BaseStyle -> {CellBaseline -> Baseline}, Epilog -> {
                LineBox[{{0, 0}, {0, 0}}], 
                LineBox[{{1, 0}, {1, 0}}]}, FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"}, 
              Method -> {"AxesInFront" -> True}, 
              PlotRange -> {{-0.1, 1.1}, {0., 0.6584361161485968}}, 
              PlotRangeClipping -> True, 
              PlotRangePadding -> {Automatic, Automatic}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Riemann sums", "scanner" -> "Integral", "id" -> 
     "RiemannSums", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    StyleBox[
                    "\"left sum\"", {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False], 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    RowBox[{
                    RowBox[{
                    FractionBox["5", 
                    RowBox[{"7", " ", 
                    SuperscriptBox["n", "6"]}]], "-", 
                    FractionBox["1", 
                    SuperscriptBox["n", "4"]], "+", 
                    FractionBox["2", "7"]}], "\[LongEqual]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    FractionBox["2", "7"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`n, 
                    DirectedInfinity[1], {}, 0, 4, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    FractionBox["2", "7"], "}"}], ",", "0", ",", "4", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    Identity]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> F\
alse]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", 
                   "\"assuming subintervals of equal length\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}, StripOnInput -> False]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`RiemannSumScanner`Private`intervals$$ = 10, 
                 CalculateScan`RiemannSumScanner`Private`method$$ = 
                 CalculateScan`RiemannSumScanner`Private`LeftValue, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`RiemannSumScanner`Private`intervals$$],
                     10, "number of subintervals"}, 2, 100, 1}, {{
                    Hold[CalculateScan`RiemannSumScanner`Private`method$$], 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    "summation method"}, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 
                    "left endpoint", 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    "midpoint", 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    "right endpoint"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$899244$$ = 
                 False, CalculateScan`RiemannSumScanner`Private`intervals$\
899249$$ = 0, CalculateScan`RiemannSumScanner`Private`method$899250$$ = 
                 False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`RiemannSumScanner`Private`intervals$$ = 10, 
                    CalculateScan`RiemannSumScanner`Private`method$$ = 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$899244$$\
, False], 
                    Hold[
                    CalculateScan`RiemannSumScanner`Private`intervals$$, 
                    CalculateScan`RiemannSumScanner`Private`intervals$899249$$\
, 0], 
                    Hold[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`method$899250$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    With[{CalculateScan`RiemannSumScanner`Private`delta$ = (1 - 
                    0)/CalculateScan`RiemannSumScanner`Private`intervals$$, 
                    CalculateScan`RiemannSumScanner`Private`epsilon$ = 
                    RandomReal[{0, 0.001}]}, 
                    Labeled[
                    Plot[
                    30 (1 - $CellContext`x)^4 $CellContext`x^2, \
{$CellContext`x, -0.09999999999999998, 1.1}, 
                    PlotRange -> {{-0.09999999999999998, 
                    1.1}, {-0.06584362139917693, 0.7242798353909465}}, Prolog -> 
                    Table[
                    (Flatten[{
                    If[
                    TrueQ[Part[#, 2, 2] > 0], {
                    Opacity[0.1], Blue, 
                    EdgeForm[
                    RGBColor[{0.63, 0.64, 0.84}]]}, {
                    Opacity[0.1], Red, 
                    EdgeForm[
                    RGBColor[{0.9, 0.64, 0.64}]]}], 
                    Polygon[#]}]& )[
                    ({{#, 0}, {#, #3}, {#2, #3}, {#2, 0}}& )[
                    0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$, 
                    0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$, 
                    (If[
                    Or[
                    Not[
                    NumericQ[#]], 
                    Not[
                    FreeQ[#, 
                    Alternatives[Complex, I]]]], 0, #]& )[
                    Quiet[
                    Which[
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`LeftValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    30 (1 - $CellContext`x)^4 $CellContext`x^2, \
$CellContext`x -> 0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    N[
                    ReplaceAll[
                    30 (1 - $CellContext`x)^4 $CellContext`x^2, \
$CellContext`x -> 0 + CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$]]], 
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    30 (1 - $CellContext`x)^4 $CellContext`x^2, \
$CellContext`x -> 0 + (CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + (
                    CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$)/2 + 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    N[
                    ReplaceAll[
                    30 (1 - $CellContext`x)^4 $CellContext`x^2, \
$CellContext`x -> 0 + (CalculateScan`RiemannSumScanner`Private`i 
                    CalculateScan`RiemannSumScanner`Private`delta$ + (
                    CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$)/2]]], 
                    MatchQ[
                    CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`RightValue], 
                    (If[
                    Not[
                    NumericQ[#]], 
                    N[
                    ReplaceAll[
                    30 (1 - $CellContext`x)^4 $CellContext`x^2, \
$CellContext`x -> 0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$ - 
                    CalculateScan`RiemannSumScanner`Private`epsilon$]], #]& )[
                    N[
                    ReplaceAll[
                    30 (1 - $CellContext`x)^4 $CellContext`x^2, \
$CellContext`x -> 0 + (CalculateScan`RiemannSumScanner`Private`i + 1) 
                    CalculateScan`RiemannSumScanner`Private`delta$]]], True, 
                    0]]]]], {
                    CalculateScan`RiemannSumScanner`Private`i, 0, 
                    CalculateScan`RiemannSumScanner`Private`intervals$$ - 1}],
                     PlotStyle -> AbsoluteThickness[1], ImageSize -> 1.5 200], 
                    (If[
                    NumericQ[#], 
                    Grid[{{
                    Row[{
                    Style["integral: ", 
                    GrayLevel[0.6]], 
                    TildeTilde[
                    Rational[2, 7], 0.2857142857142857]}]}, {
                    Row[{
                    Style["Riemann sum: ", 
                    GrayLevel[0.6]], #}]}, {
                    Row[{
                    Style["error: ", 
                    GrayLevel[0.6]], 
                    Abs[# - Rational[2, 7]]}]}}, Alignment -> ":"], ""]& )[
                    (Chop[
                    N[
                    TimeConstrained[
                    Simplify[#], 0.5, #]]]& )[
                    Quiet[CalculateScan`RiemannSumScanner`Private`delta$ Sum[
                    ReplaceAll[
                    30 (1 - $CellContext`x)^4 $CellContext`x^2, \
{$CellContext`x -> 0 + CalculateScan`RiemannSumScanner`Private`k 
                    CalculateScan`RiemannSumScanner`Private`delta$ + 
                    CalculateScan`RiemannSumScanner`Private`delta$ 
                    ReplaceAll[
                    CalculateScan`RiemannSumScanner`Private`method$$, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 0, 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    Rational[1, 2], 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    1}]}], {
                    CalculateScan`RiemannSumScanner`Private`k, 0, 
                    CalculateScan`RiemannSumScanner`Private`intervals$$ - 
                    1}]]]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`RiemannSumScanner`Private`intervals$$, 10, 
                    "number of subintervals"}, 2, 100, 1, ControlPlacement -> 
                    1}, {{CalculateScan`RiemannSumScanner`Private`method$$, 
                    CalculateScan`RiemannSumScanner`Private`LeftValue, 
                    "summation method"}, {
                    CalculateScan`RiemannSumScanner`Private`LeftValue -> 
                    "left endpoint", 
                    CalculateScan`RiemannSumScanner`Private`MidpointValue -> 
                    "midpoint", 
                    CalculateScan`RiemannSumScanner`Private`RightValue -> 
                    "right endpoint"}, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMBAVpSEhoLzAmDShJ+\
d5b7KQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/JkYzSfq/X01et+SA5SW/\
g6bE1u3KWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnN/g+\
8KTgYOhXwzgzjOrJvoJ8yhJde0aKHdufTLhMgLOf9OnW663h8JVHwVBGYAxVQg/\
bIuZTBZqmPQS6Zs0OB/HNHx+\
Vx08F5zH9XlCRUP3AescKiIWRAjimE3zrpSbqLuZlQBBQ5MJZcuLcaXuBNoqJbExnOb5xLlfP2+\
KCyrSn5l5JzTr9+Ohv4gMZu5C8x+Xszo6/sDAuF3tnRfXPqRvg+\
W1beCVPVvKG6W1zpA0MO6Z6mc1nravkCala1gU/p+qCZstGYzx/wtT/SIdMm+\
UwXrQNg86ObIVXK28Z/mVbeJljy8+lfd+\
az95RAq6aDJXcPkpS8HkUzZQHXqDt09W5dXiMOxXfMTpDKljhRDbOsltcdzyswOsdIcbaTTYgHVFPg\
Ijm1LqI43aPZczsTkFBYoHn1/XLHhvLOpSAO9vXngnC7PjyhKxbm9AcpAt1B5NMv/\
xRcSu5nGky5P1AGJpRtVb0t7A+ypIryFgGRhLjBU29BnNYJTUCFSz7QQkS5yAYQrJf9uO++\
YeLlUCq9hWqS3kWB640p+\
FJ9MsCH1KRmWlzuw4cXcFti9lE8qRWXcTSdHHabI7pfpPpxg3NgR5KQmhJwgd6tyd0e8Jf3BOWduBu\
SeiWhG5J6JaEbkn4f5cEFzH+K/0Gff23Ng=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More cases", "input" -> 
         "RiemannSums__More cases"}, {}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[30 (1 - x)^4 x^2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    RowBox[{"30", " ", 
                    SuperscriptBox["x", "2"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "4"]}], HoldForm], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"30", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox["x", "7"], "7"], "-", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "6"]}], "3"], "+", 
                    FractionBox[
                    RowBox[{"6", " ", 
                    SuperscriptBox["x", "5"]}], "5"], "-", 
                    SuperscriptBox["x", "4"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "3"], "3"]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}, StripOnInput -> False], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}, StripOnInput -> False], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {
              FontFamily -> "Times", 
               "Graphics", $CellContext`GraphicsBoxOptionsDefaultAxesStyle -> 
               Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsAxes"], \
$CellContext`GraphicsBoxOptionsDefaultTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsTicks"], \
$CellContext`GraphicsBoxOptionsDefaultFrameStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1, 
                 "GraphicsFrame"], \
$CellContext`GraphicsBoxOptionsDefaultFrameTicksStyle -> 
               Directive[
                FontFamily -> "Times", FontSize -> 10, 
                 "GraphicsFrameTicks"]}}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution"}, {}]}]}], 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
     "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.683", 
     "parsetiming" -> "0.8130000000000001", "parsetimedout" -> "false", 
     "recalculate" -> 
     "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa16761i5bb5ih91d3ccb400005fgci6c4cgagb5456426536526445626752", "id" -> 
     "MSPa16771i5bb5ih91d3ccb400004h475g7ai6eda5ff", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "30", "related" -> 
     "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa16781i5bb5ih91d3ccb4000055234c33af0ebb5a6426536526445626752", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "1", 
     "datatypes" -> "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
     "0.616", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "host" -> 
     "http://www4c.wolframalpha.com", "server" -> "63", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2017, 6, 4, 21, 10, 52.8031273`9.47523449200074}, "Line" -> 2, 
    "SessionID" -> 18286466757777930751}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "integrate 30*x^2*(1 - x)^4 dx from 0 to 1"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{683., {428., 434.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "http://www4c.wolframalpha.com/api/v2/recalc.jsp?id=\
MSPa16761i5bb5ih91d3ccb400005fgci6c4cgagb5456426536526445626752", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7055634532817698`*^9},ExpressionUUID->"3fff3f6e-f837-4006-b524-\
08ae17e19f62"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{759, 833},
WindowMargins->{{Automatic, 360}, {Automatic, 32}},
FrontEndVersion->"11.1 for Microsoft Windows (64-bit) (March 13, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 195, 3, 41, "Subsubsection", "ExpressionUUID" -> \
"946a7dc8-71b2-4cd9-87aa-cd2db5e7f4eb"],
Cell[CellGroupData[{
Cell[778, 27, 153, 3, 33, "Subsubsection", "ExpressionUUID" -> \
"7591c33c-664f-4f5c-9fd5-db6dd61ef6c1"],
Cell[CellGroupData[{
Cell[956, 34, 692, 22, 59, "Input", "ExpressionUUID" -> \
"0b45de1e-e3db-47b6-bad3-b85d7f1cf09e"],
Cell[1651, 58, 537, 17, 59, "Output", "ExpressionUUID" -> \
"d5056969-1866-4822-a63c-237e205ede35"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2237, 81, 157, 3, 39, "Subsubsection", "ExpressionUUID" -> \
"f9ffb2d8-c38b-4983-9b95-be6541a2a54c"],
Cell[CellGroupData[{
Cell[2419, 88, 865, 26, 62, "Input", "ExpressionUUID" -> \
"22418e7b-4712-4843-94f1-32c597f89803"],
Cell[3287, 116, 1573, 53, 62, "Output", "ExpressionUUID" -> \
"577e9d83-a1cd-47f4-b25e-90cdefad6e48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4897, 174, 1001, 31, 47, "WolframAlphaLong", "ExpressionUUID" -> \
"7bc1d05f-c154-4515-ac87-7aa8ad4f6512"],
Cell[5901, 207, 40451, 862, 818, "Print", "ExpressionUUID" -> \
"b20799f6-18c3-4d34-81d8-e3f704444520"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46389, 1074, 617, 18, 47, "WolframAlphaLong", "ExpressionUUID" -> \
"4e2a4a17-f882-471b-b582-a0b4a3d1b4cb"],
Cell[47009, 1094, 25509, 518, 556, "Print", "ExpressionUUID" -> \
"2dbba7d3-3750-43eb-8ad5-150ab971dc45"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[72567, 1618, 158, 3, 49, "Subsection", "ExpressionUUID" -> \
"e248a6fb-b8a5-472f-9869-797b0eb70af1"],
Cell[CellGroupData[{
Cell[72750, 1625, 153, 3, 39, "Subsubsection", "ExpressionUUID" -> \
"24c5a1db-6ad7-4a33-b959-8848d6b24290"],
Cell[72906, 1630, 221, 4, 30, "Input", "ExpressionUUID" -> \
"65fd8a91-4c0c-4800-a104-9044b7f2317e"],
Cell[CellGroupData[{
Cell[73152, 1638, 595, 18, 47, "WolframAlphaLong", "ExpressionUUID" -> \
"1a939202-a13c-4664-9506-ae9a3a20d83e"],
Cell[73750, 1658, 319, 8, 21, "Message", "ExpressionUUID" -> \
"95ab43af-c2dc-45bf-82d7-ae03f6946bbb"],
Cell[74072, 1668, 163, 3, 22, "Print", "ExpressionUUID" -> \
"df715752-757b-479f-aade-a4a80bd3a552"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[74296, 1678, 160, 3, 49, "Subsection", "ExpressionUUID" -> \
"33d9a972-9faf-4f46-8e62-0744568bdc90"],
Cell[CellGroupData[{
Cell[74481, 1685, 153, 3, 39, "Subsubsection", "ExpressionUUID" -> \
"36717ed6-e085-4d01-ac45-55bc4b997130"],
Cell[CellGroupData[{
Cell[74659, 1692, 180, 3, 44, "WolframAlphaLong", "ExpressionUUID" -> \
"77f73135-4988-4a2f-b3b1-715b1ed243d1"],
Cell[74842, 1697, 51883, 1120, 970, "Print", "ExpressionUUID" -> \
"7a43875b-c9d7-46c1-b358-589a94c6e2e2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[126774, 2823, 157, 3, 39, "Subsubsection", "ExpressionUUID" -> \
"4613fba1-692e-45d7-85c7-59d7df28fd8c"],
Cell[CellGroupData[{
Cell[126956, 2830, 556, 17, 30, "Input", "ExpressionUUID" -> \
"004f3db4-0aeb-4a05-832d-535507058fb7"],
Cell[127515, 2849, 495, 16, 30, "Output", "ExpressionUUID" -> \
"e300d663-cc30-47a7-9377-fd51e91fcb1f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128047, 2870, 190, 3, 44, "WolframAlphaLong", "ExpressionUUID" -> \
"e0bd0cd8-e544-43f5-85c1-5badf4d5e05f"],
Cell[128240, 2875, 103575, 2164, 4726, "Print", "ExpressionUUID" -> \
"44d7e226-00ac-409d-898d-243e30109751"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231852, 5044, 506, 16, 48, "WolframAlphaLong", "ExpressionUUID" -> \
"a0c8bec5-f358-4a57-8642-e6cb562f66f7"],
Cell[232361, 5062, 69754, 1434, 4130, "Print", "ExpressionUUID" -> \
"62b9c113-1e47-47d1-92fa-4aa0d553d5ca"],
Cell[302118, 6498, 319, 8, 21, "Message", "ExpressionUUID" -> \
"76c54789-679a-4d9d-9e47-6d2bccdf9342"],
Cell[302440, 6508, 473, 10, 39, "Message", "ExpressionUUID" -> \
"cea7f962-9959-438b-8cc3-9ba71c71b9f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[302950, 6523, 551, 18, 64, "WolframAlphaLong", "ExpressionUUID" -> \
"8a08f7d8-1a7d-48a8-b216-445b32bba38b"],
Cell[303504, 6543, 153331, 3125, 2080, "Print", "ExpressionUUID" -> \
"b109a1dd-25b5-4216-9967-e30c443b107d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[456896, 9675, 160, 3, 49, "Subsection", "ExpressionUUID" -> \
"20955129-7e74-40f0-a17d-25b8621a5069"],
Cell[CellGroupData[{
Cell[457081, 9682, 596, 18, 44, "WolframAlphaLong", "ExpressionUUID" -> \
"15dc0a1c-580d-46af-9b93-9043d84bbac2"],
Cell[457680, 9702, 134952, 2457, 2082, "Print", "ExpressionUUID" -> \
"d7a09714-e76f-40ef-84d8-1a66babb6dfe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[592669, 12164, 522, 15, 44, "WolframAlphaLong", "ExpressionUUID" -> \
"835aa4ea-ce53-4922-9942-26e6c3596736"],
Cell[593194, 12181, 124641, 2199, 872, "Print", "ExpressionUUID" -> \
"3fff3f6e-f837-4006-b524-08ae17e19f62"]
}, Open  ]]
}, Open  ]]
}
]
*)

